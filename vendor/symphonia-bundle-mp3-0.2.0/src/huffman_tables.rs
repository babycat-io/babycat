// Symphonia
// Copyright (c) 2019 The Project Symphonia Developers.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

//////////////////////////////////////////////////////////////////////
//                             WARNING                              //
//                                                                  //
//         Do not edit the contents of this file manually!          //
//                                                                  //
// The tables within this file were automatically derived from the  //
//          ISO/IEC 11172-3 (MPEG-1 Part 3) standard using          //
//  mpeg_huffman_tablegen.py in <root>/src/symphonia-codec-mp3/tools.  //
//                                                                  //
//////////////////////////////////////////////////////////////////////

use symphonia_core::{val8, jmp8};
use symphonia_core::io::huffman::{H8, HuffmanTable};

pub const HUFFMAN_TABLE_0: HuffmanTable<H8> = HuffmanTable {
    data: &[],
    n_init_bits: 0,
    n_table_bits: 0,
};

pub const HUFFMAN_TABLE_1: HuffmanTable<H8> = HuffmanTable {
    data: &[
        // 0b ... (0 +8)
        val8!(0x11, 3),    // 0b000
        val8!(0x1, 3),    // 0b001
        val8!(0x10, 2),    // 0b010
        val8!(0x10, 2),    // 0b011
        val8!(0x0, 1),    // 0b100
        val8!(0x0, 1),    // 0b101
        val8!(0x0, 1),    // 0b110
        val8!(0x0, 1),    // 0b111
    ],
    n_init_bits: 3,
    n_table_bits: 3,
};

pub const HUFFMAN_TABLE_2: HuffmanTable<H8> = HuffmanTable {
    data: &[
        // 0b ... (0 +16)
        jmp8!(16, 2),    // 0b0000
        jmp8!(20, 1),    // 0b0001
        val8!(0x11, 3),    // 0b0010
        val8!(0x11, 3),    // 0b0011
        val8!(0x1, 3),    // 0b0100
        val8!(0x1, 3),    // 0b0101
        val8!(0x10, 3),    // 0b0110
        val8!(0x10, 3),    // 0b0111
        val8!(0x0, 1),    // 0b1000
        val8!(0x0, 1),    // 0b1001
        val8!(0x0, 1),    // 0b1010
        val8!(0x0, 1),    // 0b1011
        val8!(0x0, 1),    // 0b1100
        val8!(0x0, 1),    // 0b1101
        val8!(0x0, 1),    // 0b1110
        val8!(0x0, 1),    // 0b1111

        // 0b0000 ... (16 +4)
        val8!(0x22, 2),    // 0b00
        val8!(0x2, 2),    // 0b01
        val8!(0x12, 1),    // 0b10
        val8!(0x12, 1),    // 0b11

        // 0b0001 ... (20 +2)
        val8!(0x21, 1),    // 0b0
        val8!(0x20, 1),    // 0b1
    ],
    n_init_bits: 4,
    n_table_bits: 6,
};

pub const HUFFMAN_TABLE_3: HuffmanTable<H8> = HuffmanTable {
    data: &[
        // 0b ... (0 +16)
        jmp8!(16, 2),    // 0b0000
        jmp8!(20, 1),    // 0b0001
        val8!(0x10, 3),    // 0b0010
        val8!(0x10, 3),    // 0b0011
        val8!(0x11, 2),    // 0b0100
        val8!(0x11, 2),    // 0b0101
        val8!(0x11, 2),    // 0b0110
        val8!(0x11, 2),    // 0b0111
        val8!(0x1, 2),    // 0b1000
        val8!(0x1, 2),    // 0b1001
        val8!(0x1, 2),    // 0b1010
        val8!(0x1, 2),    // 0b1011
        val8!(0x0, 2),    // 0b1100
        val8!(0x0, 2),    // 0b1101
        val8!(0x0, 2),    // 0b1110
        val8!(0x0, 2),    // 0b1111

        // 0b0000 ... (16 +4)
        val8!(0x22, 2),    // 0b00
        val8!(0x2, 2),    // 0b01
        val8!(0x12, 1),    // 0b10
        val8!(0x12, 1),    // 0b11

        // 0b0001 ... (20 +2)
        val8!(0x21, 1),    // 0b0
        val8!(0x20, 1),    // 0b1
    ],
    n_init_bits: 4,
    n_table_bits: 6,
};

pub const HUFFMAN_TABLE_5: HuffmanTable<H8> = HuffmanTable {
    data: &[
        // 0b ... (0 +16)
        jmp8!(16, 4),    // 0b0000
        jmp8!(32, 2),    // 0b0001
        val8!(0x11, 3),    // 0b0010
        val8!(0x11, 3),    // 0b0011
        val8!(0x1, 3),    // 0b0100
        val8!(0x1, 3),    // 0b0101
        val8!(0x10, 3),    // 0b0110
        val8!(0x10, 3),    // 0b0111
        val8!(0x0, 1),    // 0b1000
        val8!(0x0, 1),    // 0b1001
        val8!(0x0, 1),    // 0b1010
        val8!(0x0, 1),    // 0b1011
        val8!(0x0, 1),    // 0b1100
        val8!(0x0, 1),    // 0b1101
        val8!(0x0, 1),    // 0b1110
        val8!(0x0, 1),    // 0b1111

        // 0b0000 ... (16 +16)
        val8!(0x33, 4),    // 0b0000
        val8!(0x23, 4),    // 0b0001
        val8!(0x32, 3),    // 0b0010
        val8!(0x32, 3),    // 0b0011
        val8!(0x31, 2),    // 0b0100
        val8!(0x31, 2),    // 0b0101
        val8!(0x31, 2),    // 0b0110
        val8!(0x31, 2),    // 0b0111
        val8!(0x13, 3),    // 0b1000
        val8!(0x13, 3),    // 0b1001
        val8!(0x3, 3),    // 0b1010
        val8!(0x3, 3),    // 0b1011
        val8!(0x30, 3),    // 0b1100
        val8!(0x30, 3),    // 0b1101
        val8!(0x22, 3),    // 0b1110
        val8!(0x22, 3),    // 0b1111

        // 0b0001 ... (32 +4)
        val8!(0x12, 2),    // 0b00
        val8!(0x21, 2),    // 0b01
        val8!(0x2, 2),    // 0b10
        val8!(0x20, 2),    // 0b11
    ],
    n_init_bits: 4,
    n_table_bits: 8,
};

pub const HUFFMAN_TABLE_6: HuffmanTable<H8> = HuffmanTable {
    data: &[
        // 0b ... (0 +16)
        jmp8!(16, 3),    // 0b0000
        jmp8!(24, 1),    // 0b0001
        jmp8!(26, 1),    // 0b0010
        val8!(0x12, 4),    // 0b0011
        val8!(0x21, 4),    // 0b0100
        val8!(0x20, 4),    // 0b0101
        val8!(0x1, 3),    // 0b0110
        val8!(0x1, 3),    // 0b0111
        val8!(0x11, 2),    // 0b1000
        val8!(0x11, 2),    // 0b1001
        val8!(0x11, 2),    // 0b1010
        val8!(0x11, 2),    // 0b1011
        val8!(0x10, 3),    // 0b1100
        val8!(0x10, 3),    // 0b1101
        val8!(0x0, 3),    // 0b1110
        val8!(0x0, 3),    // 0b1111

        // 0b0000 ... (16 +8)
        val8!(0x33, 3),    // 0b000
        val8!(0x3, 3),    // 0b001
        val8!(0x23, 2),    // 0b010
        val8!(0x23, 2),    // 0b011
        val8!(0x32, 2),    // 0b100
        val8!(0x32, 2),    // 0b101
        val8!(0x30, 2),    // 0b110
        val8!(0x30, 2),    // 0b111

        // 0b0001 ... (24 +2)
        val8!(0x13, 1),    // 0b0
        val8!(0x31, 1),    // 0b1

        // 0b0010 ... (26 +2)
        val8!(0x22, 1),    // 0b0
        val8!(0x2, 1),    // 0b1
    ],
    n_init_bits: 4,
    n_table_bits: 7,
};

pub const HUFFMAN_TABLE_7: HuffmanTable<H8> = HuffmanTable {
    data: &[
        // 0b ... (0 +16)
        jmp8!(16, 4),    // 0b0000
        jmp8!(32, 4),    // 0b0001
        jmp8!(48, 2),    // 0b0010
        val8!(0x11, 4),    // 0b0011
        val8!(0x1, 3),    // 0b0100
        val8!(0x1, 3),    // 0b0101
        val8!(0x10, 3),    // 0b0110
        val8!(0x10, 3),    // 0b0111
        val8!(0x0, 1),    // 0b1000
        val8!(0x0, 1),    // 0b1001
        val8!(0x0, 1),    // 0b1010
        val8!(0x0, 1),    // 0b1011
        val8!(0x0, 1),    // 0b1100
        val8!(0x0, 1),    // 0b1101
        val8!(0x0, 1),    // 0b1110
        val8!(0x0, 1),    // 0b1111

        // 0b0000 ... (16 +16)
        jmp8!(52, 2),    // 0b0000
        jmp8!(56, 1),    // 0b0001
        jmp8!(58, 1),    // 0b0010
        val8!(0x15, 4),    // 0b0011
        val8!(0x51, 4),    // 0b0100
        jmp8!(60, 1),    // 0b0101
        val8!(0x50, 4),    // 0b0110
        jmp8!(62, 1),    // 0b0111
        val8!(0x24, 4),    // 0b1000
        val8!(0x42, 4),    // 0b1001
        val8!(0x14, 3),    // 0b1010
        val8!(0x14, 3),    // 0b1011
        val8!(0x41, 3),    // 0b1100
        val8!(0x41, 3),    // 0b1101
        val8!(0x40, 3),    // 0b1110
        val8!(0x40, 3),    // 0b1111

        // 0b0001 ... (32 +16)
        val8!(0x4, 4),    // 0b0000
        val8!(0x23, 4),    // 0b0001
        val8!(0x32, 4),    // 0b0010
        val8!(0x3, 4),    // 0b0011
        val8!(0x13, 3),    // 0b0100
        val8!(0x13, 3),    // 0b0101
        val8!(0x31, 3),    // 0b0110
        val8!(0x31, 3),    // 0b0111
        val8!(0x30, 3),    // 0b1000
        val8!(0x30, 3),    // 0b1001
        val8!(0x22, 3),    // 0b1010
        val8!(0x22, 3),    // 0b1011
        val8!(0x12, 2),    // 0b1100
        val8!(0x12, 2),    // 0b1101
        val8!(0x12, 2),    // 0b1110
        val8!(0x12, 2),    // 0b1111

        // 0b0010 ... (48 +4)
        val8!(0x21, 1),    // 0b00
        val8!(0x21, 1),    // 0b01
        val8!(0x2, 2),    // 0b10
        val8!(0x20, 2),    // 0b11

        // 0b0000 0000 ... (52 +4)
        val8!(0x55, 2),    // 0b00
        val8!(0x45, 2),    // 0b01
        val8!(0x54, 2),    // 0b10
        val8!(0x53, 2),    // 0b11

        // 0b0000 0001 ... (56 +2)
        val8!(0x35, 1),    // 0b0
        val8!(0x44, 1),    // 0b1

        // 0b0000 0010 ... (58 +2)
        val8!(0x25, 1),    // 0b0
        val8!(0x52, 1),    // 0b1

        // 0b0000 0101 ... (60 +2)
        val8!(0x5, 1),    // 0b0
        val8!(0x34, 1),    // 0b1

        // 0b0000 0111 ... (62 +2)
        val8!(0x43, 1),    // 0b0
        val8!(0x33, 1),    // 0b1
    ],
    n_init_bits: 4,
    n_table_bits: 10,
};

pub const HUFFMAN_TABLE_8: HuffmanTable<H8> = HuffmanTable {
    data: &[
        // 0b ... (0 +16)
        jmp8!(16, 4),    // 0b0000
        jmp8!(32, 4),    // 0b0001
        val8!(0x12, 4),    // 0b0010
        val8!(0x21, 4),    // 0b0011
        val8!(0x11, 2),    // 0b0100
        val8!(0x11, 2),    // 0b0101
        val8!(0x11, 2),    // 0b0110
        val8!(0x11, 2),    // 0b0111
        val8!(0x1, 3),    // 0b1000
        val8!(0x1, 3),    // 0b1001
        val8!(0x10, 3),    // 0b1010
        val8!(0x10, 3),    // 0b1011
        val8!(0x0, 2),    // 0b1100
        val8!(0x0, 2),    // 0b1101
        val8!(0x0, 2),    // 0b1110
        val8!(0x0, 2),    // 0b1111

        // 0b0000 ... (16 +16)
        jmp8!(48, 3),    // 0b0000
        jmp8!(56, 2),    // 0b0001
        jmp8!(60, 1),    // 0b0010
        val8!(0x15, 4),    // 0b0011
        val8!(0x51, 4),    // 0b0100
        jmp8!(62, 1),    // 0b0101
        jmp8!(64, 1),    // 0b0110
        val8!(0x24, 4),    // 0b0111
        val8!(0x42, 4),    // 0b1000
        val8!(0x14, 4),    // 0b1001
        val8!(0x41, 3),    // 0b1010
        val8!(0x41, 3),    // 0b1011
        val8!(0x4, 4),    // 0b1100
        val8!(0x40, 4),    // 0b1101
        val8!(0x23, 4),    // 0b1110
        val8!(0x32, 4),    // 0b1111

        // 0b0001 ... (32 +16)
        val8!(0x13, 4),    // 0b0000
        val8!(0x31, 4),    // 0b0001
        val8!(0x3, 4),    // 0b0010
        val8!(0x30, 4),    // 0b0011
        val8!(0x22, 2),    // 0b0100
        val8!(0x22, 2),    // 0b0101
        val8!(0x22, 2),    // 0b0110
        val8!(0x22, 2),    // 0b0111
        val8!(0x2, 2),    // 0b1000
        val8!(0x2, 2),    // 0b1001
        val8!(0x2, 2),    // 0b1010
        val8!(0x2, 2),    // 0b1011
        val8!(0x20, 2),    // 0b1100
        val8!(0x20, 2),    // 0b1101
        val8!(0x20, 2),    // 0b1110
        val8!(0x20, 2),    // 0b1111

        // 0b0000 0000 ... (48 +8)
        val8!(0x55, 3),    // 0b000
        val8!(0x54, 3),    // 0b001
        val8!(0x45, 2),    // 0b010
        val8!(0x45, 2),    // 0b011
        val8!(0x53, 1),    // 0b100
        val8!(0x53, 1),    // 0b101
        val8!(0x53, 1),    // 0b110
        val8!(0x53, 1),    // 0b111

        // 0b0000 0001 ... (56 +4)
        val8!(0x35, 2),    // 0b00
        val8!(0x44, 2),    // 0b01
        val8!(0x25, 1),    // 0b10
        val8!(0x25, 1),    // 0b11

        // 0b0000 0010 ... (60 +2)
        val8!(0x52, 1),    // 0b0
        val8!(0x5, 1),    // 0b1

        // 0b0000 0101 ... (62 +2)
        val8!(0x34, 1),    // 0b0
        val8!(0x43, 1),    // 0b1

        // 0b0000 0110 ... (64 +2)
        val8!(0x50, 1),    // 0b0
        val8!(0x33, 1),    // 0b1
    ],
    n_init_bits: 4,
    n_table_bits: 11,
};

pub const HUFFMAN_TABLE_9: HuffmanTable<H8> = HuffmanTable {
    data: &[
        // 0b ... (0 +16)
        jmp8!(16, 4),    // 0b0000
        jmp8!(32, 3),    // 0b0001
        jmp8!(40, 2),    // 0b0010
        jmp8!(44, 2),    // 0b0011
        jmp8!(48, 1),    // 0b0100
        val8!(0x12, 4),    // 0b0101
        val8!(0x21, 4),    // 0b0110
        val8!(0x20, 4),    // 0b0111
        val8!(0x11, 3),    // 0b1000
        val8!(0x11, 3),    // 0b1001
        val8!(0x1, 3),    // 0b1010
        val8!(0x1, 3),    // 0b1011
        val8!(0x10, 3),    // 0b1100
        val8!(0x10, 3),    // 0b1101
        val8!(0x0, 3),    // 0b1110
        val8!(0x0, 3),    // 0b1111

        // 0b0000 ... (16 +16)
        jmp8!(50, 1),    // 0b0000
        val8!(0x35, 4),    // 0b0001
        val8!(0x53, 4),    // 0b0010
        jmp8!(52, 1),    // 0b0011
        val8!(0x44, 4),    // 0b0100
        val8!(0x25, 4),    // 0b0101
        val8!(0x52, 4),    // 0b0110
        val8!(0x15, 4),    // 0b0111
        val8!(0x51, 3),    // 0b1000
        val8!(0x51, 3),    // 0b1001
        val8!(0x34, 3),    // 0b1010
        val8!(0x34, 3),    // 0b1011
        val8!(0x43, 3),    // 0b1100
        val8!(0x43, 3),    // 0b1101
        val8!(0x50, 4),    // 0b1110
        val8!(0x4, 4),    // 0b1111

        // 0b0001 ... (32 +8)
        val8!(0x24, 3),    // 0b000
        val8!(0x42, 3),    // 0b001
        val8!(0x33, 3),    // 0b010
        val8!(0x40, 3),    // 0b011
        val8!(0x14, 2),    // 0b100
        val8!(0x14, 2),    // 0b101
        val8!(0x41, 2),    // 0b110
        val8!(0x41, 2),    // 0b111

        // 0b0010 ... (40 +4)
        val8!(0x23, 2),    // 0b00
        val8!(0x32, 2),    // 0b01
        val8!(0x13, 1),    // 0b10
        val8!(0x13, 1),    // 0b11

        // 0b0011 ... (44 +4)
        val8!(0x31, 1),    // 0b00
        val8!(0x31, 1),    // 0b01
        val8!(0x3, 2),    // 0b10
        val8!(0x30, 2),    // 0b11

        // 0b0100 ... (48 +2)
        val8!(0x22, 1),    // 0b0
        val8!(0x2, 1),    // 0b1

        // 0b0000 0000 ... (50 +2)
        val8!(0x55, 1),    // 0b0
        val8!(0x45, 1),    // 0b1

        // 0b0000 0011 ... (52 +2)
        val8!(0x54, 1),    // 0b0
        val8!(0x5, 1),    // 0b1
    ],
    n_init_bits: 4,
    n_table_bits: 9,
};

pub const HUFFMAN_TABLE_10: HuffmanTable<H8> = HuffmanTable {
    data: &[
        // 0b ... (0 +16)
        jmp8!(16, 4),    // 0b0000
        jmp8!(32, 4),    // 0b0001
        jmp8!(48, 2),    // 0b0010
        val8!(0x11, 4),    // 0b0011
        val8!(0x1, 3),    // 0b0100
        val8!(0x1, 3),    // 0b0101
        val8!(0x10, 3),    // 0b0110
        val8!(0x10, 3),    // 0b0111
        val8!(0x0, 1),    // 0b1000
        val8!(0x0, 1),    // 0b1001
        val8!(0x0, 1),    // 0b1010
        val8!(0x0, 1),    // 0b1011
        val8!(0x0, 1),    // 0b1100
        val8!(0x0, 1),    // 0b1101
        val8!(0x0, 1),    // 0b1110
        val8!(0x0, 1),    // 0b1111

        // 0b0000 ... (16 +16)
        jmp8!(52, 3),    // 0b0000
        jmp8!(60, 2),    // 0b0001
        jmp8!(64, 3),    // 0b0010
        jmp8!(72, 1),    // 0b0011
        jmp8!(74, 2),    // 0b0100
        jmp8!(78, 2),    // 0b0101
        jmp8!(82, 2),    // 0b0110
        val8!(0x17, 4),    // 0b0111
        val8!(0x71, 4),    // 0b1000
        jmp8!(86, 1),    // 0b1001
        jmp8!(88, 2),    // 0b1010
        jmp8!(92, 2),    // 0b1011
        val8!(0x16, 4),    // 0b1100
        val8!(0x61, 4),    // 0b1101
        val8!(0x60, 4),    // 0b1110
        jmp8!(96, 1),    // 0b1111

        // 0b0001 ... (32 +16)
        jmp8!(98, 1),    // 0b0000
        jmp8!(100, 1),    // 0b0001
        val8!(0x14, 4),    // 0b0010
        val8!(0x41, 4),    // 0b0011
        val8!(0x40, 4),    // 0b0100
        val8!(0x23, 4),    // 0b0101
        val8!(0x32, 4),    // 0b0110
        val8!(0x3, 4),    // 0b0111
        val8!(0x13, 3),    // 0b1000
        val8!(0x13, 3),    // 0b1001
        val8!(0x31, 3),    // 0b1010
        val8!(0x31, 3),    // 0b1011
        val8!(0x30, 3),    // 0b1100
        val8!(0x30, 3),    // 0b1101
        val8!(0x22, 3),    // 0b1110
        val8!(0x22, 3),    // 0b1111

        // 0b0010 ... (48 +4)
        val8!(0x12, 2),    // 0b00
        val8!(0x21, 2),    // 0b01
        val8!(0x2, 2),    // 0b10
        val8!(0x20, 2),    // 0b11

        // 0b0000 0000 ... (52 +8)
        val8!(0x77, 3),    // 0b000
        val8!(0x67, 3),    // 0b001
        val8!(0x76, 3),    // 0b010
        val8!(0x57, 3),    // 0b011
        val8!(0x75, 3),    // 0b100
        val8!(0x66, 3),    // 0b101
        val8!(0x47, 2),    // 0b110
        val8!(0x47, 2),    // 0b111

        // 0b0000 0001 ... (60 +4)
        val8!(0x74, 2),    // 0b00
        val8!(0x56, 2),    // 0b01
        val8!(0x65, 2),    // 0b10
        val8!(0x37, 2),    // 0b11

        // 0b0000 0010 ... (64 +8)
        val8!(0x73, 2),    // 0b000
        val8!(0x73, 2),    // 0b001
        val8!(0x46, 2),    // 0b010
        val8!(0x46, 2),    // 0b011
        val8!(0x55, 3),    // 0b100
        val8!(0x54, 3),    // 0b101
        val8!(0x63, 2),    // 0b110
        val8!(0x63, 2),    // 0b111

        // 0b0000 0011 ... (72 +2)
        val8!(0x27, 1),    // 0b0
        val8!(0x72, 1),    // 0b1

        // 0b0000 0100 ... (74 +4)
        val8!(0x64, 2),    // 0b00
        val8!(0x7, 2),    // 0b01
        val8!(0x70, 1),    // 0b10
        val8!(0x70, 1),    // 0b11

        // 0b0000 0101 ... (78 +4)
        val8!(0x62, 1),    // 0b00
        val8!(0x62, 1),    // 0b01
        val8!(0x45, 2),    // 0b10
        val8!(0x35, 2),    // 0b11

        // 0b0000 0110 ... (82 +4)
        val8!(0x6, 1),    // 0b00
        val8!(0x6, 1),    // 0b01
        val8!(0x53, 2),    // 0b10
        val8!(0x44, 2),    // 0b11

        // 0b0000 1001 ... (86 +2)
        val8!(0x36, 1),    // 0b0
        val8!(0x26, 1),    // 0b1

        // 0b0000 1010 ... (88 +4)
        val8!(0x25, 2),    // 0b00
        val8!(0x52, 2),    // 0b01
        val8!(0x15, 1),    // 0b10
        val8!(0x15, 1),    // 0b11

        // 0b0000 1011 ... (92 +4)
        val8!(0x51, 1),    // 0b00
        val8!(0x51, 1),    // 0b01
        val8!(0x34, 2),    // 0b10
        val8!(0x43, 2),    // 0b11

        // 0b0000 1111 ... (96 +2)
        val8!(0x5, 1),    // 0b0
        val8!(0x50, 1),    // 0b1

        // 0b0001 0000 ... (98 +2)
        val8!(0x24, 1),    // 0b0
        val8!(0x42, 1),    // 0b1

        // 0b0001 0001 ... (100 +2)
        val8!(0x33, 1),    // 0b0
        val8!(0x4, 1),    // 0b1
    ],
    n_init_bits: 4,
    n_table_bits: 11,
};

pub const HUFFMAN_TABLE_11: HuffmanTable<H8> = HuffmanTable {
    data: &[
        // 0b ... (0 +16)
        jmp8!(16, 4),    // 0b0000
        jmp8!(32, 4),    // 0b0001
        jmp8!(48, 4),    // 0b0010
        jmp8!(64, 3),    // 0b0011
        val8!(0x12, 4),    // 0b0100
        jmp8!(72, 1),    // 0b0101
        val8!(0x11, 3),    // 0b0110
        val8!(0x11, 3),    // 0b0111
        val8!(0x1, 3),    // 0b1000
        val8!(0x1, 3),    // 0b1001
        val8!(0x10, 3),    // 0b1010
        val8!(0x10, 3),    // 0b1011
        val8!(0x0, 2),    // 0b1100
        val8!(0x0, 2),    // 0b1101
        val8!(0x0, 2),    // 0b1110
        val8!(0x0, 2),    // 0b1111

        // 0b0000 ... (16 +16)
        jmp8!(74, 2),    // 0b0000
        jmp8!(78, 3),    // 0b0001
        jmp8!(86, 2),    // 0b0010
        jmp8!(90, 1),    // 0b0011
        jmp8!(92, 2),    // 0b0100
        val8!(0x27, 4),    // 0b0101
        val8!(0x72, 4),    // 0b0110
        jmp8!(96, 1),    // 0b0111
        val8!(0x71, 3),    // 0b1000
        val8!(0x71, 3),    // 0b1001
        val8!(0x17, 4),    // 0b1010
        val8!(0x70, 4),    // 0b1011
        val8!(0x36, 4),    // 0b1100
        val8!(0x63, 4),    // 0b1101
        val8!(0x60, 4),    // 0b1110
        jmp8!(98, 1),    // 0b1111

        // 0b0001 ... (32 +16)
        jmp8!(100, 1),    // 0b0000
        val8!(0x15, 4),    // 0b0001
        val8!(0x62, 3),    // 0b0010
        val8!(0x62, 3),    // 0b0011
        val8!(0x26, 4),    // 0b0100
        val8!(0x6, 4),    // 0b0101
        val8!(0x16, 3),    // 0b0110
        val8!(0x16, 3),    // 0b0111
        val8!(0x61, 3),    // 0b1000
        val8!(0x61, 3),    // 0b1001
        val8!(0x51, 4),    // 0b1010
        val8!(0x34, 4),    // 0b1011
        val8!(0x50, 4),    // 0b1100
        jmp8!(102, 1),    // 0b1101
        val8!(0x24, 4),    // 0b1110
        val8!(0x42, 4),    // 0b1111

        // 0b0010 ... (48 +16)
        val8!(0x14, 4),    // 0b0000
        val8!(0x41, 4),    // 0b0001
        val8!(0x4, 4),    // 0b0010
        val8!(0x40, 4),    // 0b0011
        val8!(0x23, 3),    // 0b0100
        val8!(0x23, 3),    // 0b0101
        val8!(0x32, 3),    // 0b0110
        val8!(0x32, 3),    // 0b0111
        val8!(0x13, 2),    // 0b1000
        val8!(0x13, 2),    // 0b1001
        val8!(0x13, 2),    // 0b1010
        val8!(0x13, 2),    // 0b1011
        val8!(0x31, 2),    // 0b1100
        val8!(0x31, 2),    // 0b1101
        val8!(0x31, 2),    // 0b1110
        val8!(0x31, 2),    // 0b1111

        // 0b0011 ... (64 +8)
        val8!(0x3, 3),    // 0b000
        val8!(0x30, 3),    // 0b001
        val8!(0x22, 2),    // 0b010
        val8!(0x22, 2),    // 0b011
        val8!(0x21, 1),    // 0b100
        val8!(0x21, 1),    // 0b101
        val8!(0x21, 1),    // 0b110
        val8!(0x21, 1),    // 0b111

        // 0b0101 ... (72 +2)
        val8!(0x2, 1),    // 0b0
        val8!(0x20, 1),    // 0b1

        // 0b0000 0000 ... (74 +4)
        val8!(0x77, 2),    // 0b00
        val8!(0x67, 2),    // 0b01
        val8!(0x76, 2),    // 0b10
        val8!(0x75, 2),    // 0b11

        // 0b0000 0001 ... (78 +8)
        val8!(0x66, 2),    // 0b000
        val8!(0x66, 2),    // 0b001
        val8!(0x47, 2),    // 0b010
        val8!(0x47, 2),    // 0b011
        val8!(0x74, 2),    // 0b100
        val8!(0x74, 2),    // 0b101
        val8!(0x57, 3),    // 0b110
        val8!(0x55, 3),    // 0b111

        // 0b0000 0010 ... (86 +4)
        val8!(0x56, 2),    // 0b00
        val8!(0x65, 2),    // 0b01
        val8!(0x37, 1),    // 0b10
        val8!(0x37, 1),    // 0b11

        // 0b0000 0011 ... (90 +2)
        val8!(0x73, 1),    // 0b0
        val8!(0x46, 1),    // 0b1

        // 0b0000 0100 ... (92 +4)
        val8!(0x45, 2),    // 0b00
        val8!(0x54, 2),    // 0b01
        val8!(0x35, 2),    // 0b10
        val8!(0x53, 2),    // 0b11

        // 0b0000 0111 ... (96 +2)
        val8!(0x64, 1),    // 0b0
        val8!(0x7, 1),    // 0b1

        // 0b0000 1111 ... (98 +2)
        val8!(0x44, 1),    // 0b0
        val8!(0x25, 1),    // 0b1

        // 0b0001 0000 ... (100 +2)
        val8!(0x52, 1),    // 0b0
        val8!(0x5, 1),    // 0b1

        // 0b0001 1101 ... (102 +2)
        val8!(0x43, 1),    // 0b0
        val8!(0x33, 1),    // 0b1
    ],
    n_init_bits: 4,
    n_table_bits: 11,
};

pub const HUFFMAN_TABLE_12: HuffmanTable<H8> = HuffmanTable {
    data: &[
        // 0b ... (0 +16)
        jmp8!(16, 4),    // 0b0000
        jmp8!(32, 4),    // 0b0001
        jmp8!(48, 4),    // 0b0010
        jmp8!(64, 2),    // 0b0011
        jmp8!(68, 3),    // 0b0100
        jmp8!(76, 1),    // 0b0101
        val8!(0x12, 4),    // 0b0110
        val8!(0x21, 4),    // 0b0111
        jmp8!(78, 1),    // 0b1000
        val8!(0x0, 4),    // 0b1001
        val8!(0x11, 3),    // 0b1010
        val8!(0x11, 3),    // 0b1011
        val8!(0x1, 3),    // 0b1100
        val8!(0x1, 3),    // 0b1101
        val8!(0x10, 3),    // 0b1110
        val8!(0x10, 3),    // 0b1111

        // 0b0000 ... (16 +16)
        jmp8!(80, 2),    // 0b0000
        jmp8!(84, 1),    // 0b0001
        jmp8!(86, 1),    // 0b0010
        jmp8!(88, 1),    // 0b0011
        val8!(0x56, 4),    // 0b0100
        val8!(0x37, 4),    // 0b0101
        jmp8!(90, 1),    // 0b0110
        val8!(0x27, 4),    // 0b0111
        val8!(0x72, 4),    // 0b1000
        val8!(0x46, 4),    // 0b1001
        val8!(0x64, 4),    // 0b1010
        val8!(0x17, 4),    // 0b1011
        val8!(0x71, 4),    // 0b1100
        jmp8!(92, 1),    // 0b1101
        val8!(0x36, 4),    // 0b1110
        val8!(0x63, 4),    // 0b1111

        // 0b0001 ... (32 +16)
        val8!(0x45, 4),    // 0b0000
        val8!(0x54, 4),    // 0b0001
        val8!(0x44, 4),    // 0b0010
        jmp8!(94, 1),    // 0b0011
        val8!(0x26, 3),    // 0b0100
        val8!(0x26, 3),    // 0b0101
        val8!(0x62, 3),    // 0b0110
        val8!(0x62, 3),    // 0b0111
        val8!(0x61, 3),    // 0b1000
        val8!(0x61, 3),    // 0b1001
        val8!(0x16, 4),    // 0b1010
        val8!(0x60, 4),    // 0b1011
        val8!(0x35, 4),    // 0b1100
        val8!(0x53, 4),    // 0b1101
        val8!(0x25, 4),    // 0b1110
        val8!(0x52, 4),    // 0b1111

        // 0b0010 ... (48 +16)
        val8!(0x15, 3),    // 0b0000
        val8!(0x15, 3),    // 0b0001
        val8!(0x51, 3),    // 0b0010
        val8!(0x51, 3),    // 0b0011
        val8!(0x34, 3),    // 0b0100
        val8!(0x34, 3),    // 0b0101
        val8!(0x43, 3),    // 0b0110
        val8!(0x43, 3),    // 0b0111
        val8!(0x50, 4),    // 0b1000
        val8!(0x4, 4),    // 0b1001
        val8!(0x24, 3),    // 0b1010
        val8!(0x24, 3),    // 0b1011
        val8!(0x42, 3),    // 0b1100
        val8!(0x42, 3),    // 0b1101
        val8!(0x14, 3),    // 0b1110
        val8!(0x14, 3),    // 0b1111

        // 0b0011 ... (64 +4)
        val8!(0x33, 2),    // 0b00
        val8!(0x41, 2),    // 0b01
        val8!(0x23, 2),    // 0b10
        val8!(0x32, 2),    // 0b11

        // 0b0100 ... (68 +8)
        val8!(0x40, 3),    // 0b000
        val8!(0x3, 3),    // 0b001
        val8!(0x30, 2),    // 0b010
        val8!(0x30, 2),    // 0b011
        val8!(0x13, 1),    // 0b100
        val8!(0x13, 1),    // 0b101
        val8!(0x13, 1),    // 0b110
        val8!(0x13, 1),    // 0b111

        // 0b0101 ... (76 +2)
        val8!(0x31, 1),    // 0b0
        val8!(0x22, 1),    // 0b1

        // 0b1000 ... (78 +2)
        val8!(0x2, 1),    // 0b0
        val8!(0x20, 1),    // 0b1

        // 0b0000 0000 ... (80 +4)
        val8!(0x77, 2),    // 0b00
        val8!(0x67, 2),    // 0b01
        val8!(0x76, 1),    // 0b10
        val8!(0x76, 1),    // 0b11

        // 0b0000 0001 ... (84 +2)
        val8!(0x57, 1),    // 0b0
        val8!(0x75, 1),    // 0b1

        // 0b0000 0010 ... (86 +2)
        val8!(0x66, 1),    // 0b0
        val8!(0x47, 1),    // 0b1

        // 0b0000 0011 ... (88 +2)
        val8!(0x74, 1),    // 0b0
        val8!(0x65, 1),    // 0b1

        // 0b0000 0110 ... (90 +2)
        val8!(0x73, 1),    // 0b0
        val8!(0x55, 1),    // 0b1

        // 0b0000 1101 ... (92 +2)
        val8!(0x7, 1),    // 0b0
        val8!(0x70, 1),    // 0b1

        // 0b0001 0011 ... (94 +2)
        val8!(0x6, 1),    // 0b0
        val8!(0x5, 1),    // 0b1
    ],
    n_init_bits: 4,
    n_table_bits: 10,
};

pub const HUFFMAN_TABLE_13: HuffmanTable<H8> = HuffmanTable {
    data: &[
        // 0b ... (0 +16)
        jmp8!(16, 4),    // 0b0000
        jmp8!(32, 4),    // 0b0001
        jmp8!(48, 4),    // 0b0010
        jmp8!(64, 2),    // 0b0011
        val8!(0x11, 4),    // 0b0100
        val8!(0x1, 4),    // 0b0101
        val8!(0x10, 3),    // 0b0110
        val8!(0x10, 3),    // 0b0111
        val8!(0x0, 1),    // 0b1000
        val8!(0x0, 1),    // 0b1001
        val8!(0x0, 1),    // 0b1010
        val8!(0x0, 1),    // 0b1011
        val8!(0x0, 1),    // 0b1100
        val8!(0x0, 1),    // 0b1101
        val8!(0x0, 1),    // 0b1110
        val8!(0x0, 1),    // 0b1111

        // 0b0000 ... (16 +16)
        jmp8!(68, 4),    // 0b0000
        jmp8!(84, 4),    // 0b0001
        jmp8!(100, 4),    // 0b0010
        jmp8!(116, 4),    // 0b0011
        jmp8!(132, 4),    // 0b0100
        jmp8!(148, 4),    // 0b0101
        jmp8!(164, 3),    // 0b0110
        jmp8!(172, 3),    // 0b0111
        jmp8!(180, 3),    // 0b1000
        jmp8!(188, 3),    // 0b1001
        jmp8!(196, 3),    // 0b1010
        jmp8!(204, 3),    // 0b1011
        jmp8!(212, 1),    // 0b1100
        jmp8!(214, 2),    // 0b1101
        jmp8!(218, 3),    // 0b1110
        jmp8!(226, 1),    // 0b1111

        // 0b0001 ... (32 +16)
        jmp8!(228, 2),    // 0b0000
        jmp8!(232, 2),    // 0b0001
        jmp8!(236, 2),    // 0b0010
        jmp8!(240, 2),    // 0b0011
        val8!(0x81, 4),    // 0b0100
        jmp8!(244, 1),    // 0b0101
        jmp8!(246, 1),    // 0b0110
        jmp8!(248, 1),    // 0b0111
        jmp8!(250, 2),    // 0b1000
        jmp8!(254, 1),    // 0b1001
        val8!(0x15, 4),    // 0b1010
        val8!(0x51, 4),    // 0b1011
        jmp8!(256, 1),    // 0b1100
        jmp8!(258, 1),    // 0b1101
        jmp8!(260, 1),    // 0b1110
        val8!(0x14, 4),    // 0b1111

        // 0b0010 ... (48 +16)
        val8!(0x41, 3),    // 0b0000
        val8!(0x41, 3),    // 0b0001
        val8!(0x4, 4),    // 0b0010
        val8!(0x40, 4),    // 0b0011
        val8!(0x23, 4),    // 0b0100
        val8!(0x32, 4),    // 0b0101
        val8!(0x13, 3),    // 0b0110
        val8!(0x13, 3),    // 0b0111
        val8!(0x31, 3),    // 0b1000
        val8!(0x31, 3),    // 0b1001
        val8!(0x3, 3),    // 0b1010
        val8!(0x3, 3),    // 0b1011
        val8!(0x30, 3),    // 0b1100
        val8!(0x30, 3),    // 0b1101
        val8!(0x22, 3),    // 0b1110
        val8!(0x22, 3),    // 0b1111

        // 0b0011 ... (64 +4)
        val8!(0x12, 2),    // 0b00
        val8!(0x21, 2),    // 0b01
        val8!(0x2, 2),    // 0b10
        val8!(0x20, 2),    // 0b11

        // 0b0000 0000 ... (68 +16)
        jmp8!(262, 4),    // 0b0000
        jmp8!(278, 4),    // 0b0001
        jmp8!(294, 4),    // 0b0010
        jmp8!(310, 3),    // 0b0011
        jmp8!(318, 2),    // 0b0100
        jmp8!(322, 2),    // 0b0101
        jmp8!(326, 3),    // 0b0110
        jmp8!(334, 2),    // 0b0111
        jmp8!(338, 1),    // 0b1000
        jmp8!(340, 2),    // 0b1001
        jmp8!(344, 2),    // 0b1010
        jmp8!(348, 2),    // 0b1011
        jmp8!(352, 2),    // 0b1100
        jmp8!(356, 2),    // 0b1101
        val8!(0x1f, 4),    // 0b1110
        val8!(0xf1, 4),    // 0b1111

        // 0b0000 0001 ... (84 +16)
        val8!(0xf0, 4),    // 0b0000
        jmp8!(360, 1),    // 0b0001
        jmp8!(362, 1),    // 0b0010
        jmp8!(364, 1),    // 0b0011
        val8!(0xe2, 4),    // 0b0100
        jmp8!(366, 1),    // 0b0101
        val8!(0x1e, 4),    // 0b0110
        val8!(0xe1, 4),    // 0b0111
        jmp8!(368, 1),    // 0b1000
        jmp8!(370, 1),    // 0b1001
        jmp8!(372, 1),    // 0b1010
        jmp8!(374, 1),    // 0b1011
        jmp8!(376, 1),    // 0b1100
        jmp8!(378, 1),    // 0b1101
        val8!(0xc6, 4),    // 0b1110
        val8!(0x3d, 4),    // 0b1111

        // 0b0000 0010 ... (100 +16)
        jmp8!(380, 1),    // 0b0000
        val8!(0x2d, 4),    // 0b0001
        val8!(0xd2, 4),    // 0b0010
        val8!(0x1d, 4),    // 0b0011
        val8!(0xb7, 4),    // 0b0100
        jmp8!(382, 1),    // 0b0101
        jmp8!(384, 1),    // 0b0110
        val8!(0xc3, 4),    // 0b0111
        jmp8!(386, 1),    // 0b1000
        val8!(0x4b, 4),    // 0b1001
        val8!(0xd1, 3),    // 0b1010
        val8!(0xd1, 3),    // 0b1011
        val8!(0xd, 4),    // 0b1100
        val8!(0xd0, 4),    // 0b1101
        val8!(0x8a, 4),    // 0b1110
        val8!(0xa8, 4),    // 0b1111

        // 0b0000 0011 ... (116 +16)
        val8!(0x4c, 4),    // 0b0000
        val8!(0xc4, 4),    // 0b0001
        val8!(0x6b, 4),    // 0b0010
        val8!(0xb6, 4),    // 0b0011
        val8!(0x3c, 3),    // 0b0100
        val8!(0x3c, 3),    // 0b0101
        val8!(0x2c, 3),    // 0b0110
        val8!(0x2c, 3),    // 0b0111
        val8!(0xc2, 3),    // 0b1000
        val8!(0xc2, 3),    // 0b1001
        val8!(0x5b, 3),    // 0b1010
        val8!(0x5b, 3),    // 0b1011
        val8!(0xb5, 4),    // 0b1100
        val8!(0x89, 4),    // 0b1101
        val8!(0x1c, 3),    // 0b1110
        val8!(0x1c, 3),    // 0b1111

        // 0b0000 0100 ... (132 +16)
        val8!(0xc1, 3),    // 0b0000
        val8!(0xc1, 3),    // 0b0001
        val8!(0x98, 4),    // 0b0010
        val8!(0xc, 4),    // 0b0011
        val8!(0xc0, 3),    // 0b0100
        val8!(0xc0, 3),    // 0b0101
        val8!(0xb4, 4),    // 0b0110
        val8!(0x6a, 4),    // 0b0111
        val8!(0xa6, 4),    // 0b1000
        val8!(0x79, 4),    // 0b1001
        val8!(0x3b, 3),    // 0b1010
        val8!(0x3b, 3),    // 0b1011
        val8!(0xb3, 3),    // 0b1100
        val8!(0xb3, 3),    // 0b1101
        val8!(0x88, 4),    // 0b1110
        val8!(0x5a, 4),    // 0b1111

        // 0b0000 0101 ... (148 +16)
        val8!(0x2b, 3),    // 0b0000
        val8!(0x2b, 3),    // 0b0001
        val8!(0xa5, 4),    // 0b0010
        val8!(0x69, 4),    // 0b0011
        val8!(0xa4, 3),    // 0b0100
        val8!(0xa4, 3),    // 0b0101
        val8!(0x78, 4),    // 0b0110
        val8!(0x87, 4),    // 0b0111
        val8!(0x94, 3),    // 0b1000
        val8!(0x94, 3),    // 0b1001
        val8!(0x77, 4),    // 0b1010
        val8!(0x76, 4),    // 0b1011
        val8!(0xb2, 2),    // 0b1100
        val8!(0xb2, 2),    // 0b1101
        val8!(0xb2, 2),    // 0b1110
        val8!(0xb2, 2),    // 0b1111

        // 0b0000 0110 ... (164 +8)
        val8!(0x1b, 2),    // 0b000
        val8!(0x1b, 2),    // 0b001
        val8!(0xb1, 2),    // 0b010
        val8!(0xb1, 2),    // 0b011
        val8!(0xb, 3),    // 0b100
        val8!(0xb0, 3),    // 0b101
        val8!(0x96, 3),    // 0b110
        val8!(0x4a, 3),    // 0b111

        // 0b0000 0111 ... (172 +8)
        val8!(0x3a, 3),    // 0b000
        val8!(0xa3, 3),    // 0b001
        val8!(0x59, 3),    // 0b010
        val8!(0x95, 3),    // 0b011
        val8!(0x2a, 2),    // 0b100
        val8!(0x2a, 2),    // 0b101
        val8!(0xa2, 2),    // 0b110
        val8!(0xa2, 2),    // 0b111

        // 0b0000 1000 ... (180 +8)
        val8!(0x1a, 2),    // 0b000
        val8!(0x1a, 2),    // 0b001
        val8!(0xa1, 2),    // 0b010
        val8!(0xa1, 2),    // 0b011
        val8!(0xa, 3),    // 0b100
        val8!(0x68, 3),    // 0b101
        val8!(0xa0, 2),    // 0b110
        val8!(0xa0, 2),    // 0b111

        // 0b0000 1001 ... (188 +8)
        val8!(0x86, 3),    // 0b000
        val8!(0x49, 3),    // 0b001
        val8!(0x93, 2),    // 0b010
        val8!(0x93, 2),    // 0b011
        val8!(0x39, 3),    // 0b100
        val8!(0x58, 3),    // 0b101
        val8!(0x85, 3),    // 0b110
        val8!(0x67, 3),    // 0b111

        // 0b0000 1010 ... (196 +8)
        val8!(0x29, 2),    // 0b000
        val8!(0x29, 2),    // 0b001
        val8!(0x92, 2),    // 0b010
        val8!(0x92, 2),    // 0b011
        val8!(0x57, 3),    // 0b100
        val8!(0x75, 3),    // 0b101
        val8!(0x38, 2),    // 0b110
        val8!(0x38, 2),    // 0b111

        // 0b0000 1011 ... (204 +8)
        val8!(0x83, 2),    // 0b000
        val8!(0x83, 2),    // 0b001
        val8!(0x66, 3),    // 0b010
        val8!(0x47, 3),    // 0b011
        val8!(0x74, 3),    // 0b100
        val8!(0x56, 3),    // 0b101
        val8!(0x65, 3),    // 0b110
        val8!(0x73, 3),    // 0b111

        // 0b0000 1100 ... (212 +2)
        val8!(0x19, 1),    // 0b0
        val8!(0x91, 1),    // 0b1

        // 0b0000 1101 ... (214 +4)
        val8!(0x9, 2),    // 0b00
        val8!(0x90, 2),    // 0b01
        val8!(0x48, 2),    // 0b10
        val8!(0x84, 2),    // 0b11

        // 0b0000 1110 ... (218 +8)
        val8!(0x72, 2),    // 0b000
        val8!(0x72, 2),    // 0b001
        val8!(0x46, 3),    // 0b010
        val8!(0x64, 3),    // 0b011
        val8!(0x28, 1),    // 0b100
        val8!(0x28, 1),    // 0b101
        val8!(0x28, 1),    // 0b110
        val8!(0x28, 1),    // 0b111

        // 0b0000 1111 ... (226 +2)
        val8!(0x82, 1),    // 0b0
        val8!(0x18, 1),    // 0b1

        // 0b0001 0000 ... (228 +4)
        val8!(0x37, 2),    // 0b00
        val8!(0x27, 2),    // 0b01
        val8!(0x17, 1),    // 0b10
        val8!(0x17, 1),    // 0b11

        // 0b0001 0001 ... (232 +4)
        val8!(0x71, 1),    // 0b00
        val8!(0x71, 1),    // 0b01
        val8!(0x55, 2),    // 0b10
        val8!(0x7, 2),    // 0b11

        // 0b0001 0010 ... (236 +4)
        val8!(0x70, 2),    // 0b00
        val8!(0x36, 2),    // 0b01
        val8!(0x63, 2),    // 0b10
        val8!(0x45, 2),    // 0b11

        // 0b0001 0011 ... (240 +4)
        val8!(0x54, 2),    // 0b00
        val8!(0x26, 2),    // 0b01
        val8!(0x62, 2),    // 0b10
        val8!(0x35, 2),    // 0b11

        // 0b0001 0101 ... (244 +2)
        val8!(0x8, 1),    // 0b0
        val8!(0x80, 1),    // 0b1

        // 0b0001 0110 ... (246 +2)
        val8!(0x16, 1),    // 0b0
        val8!(0x61, 1),    // 0b1

        // 0b0001 0111 ... (248 +2)
        val8!(0x6, 1),    // 0b0
        val8!(0x60, 1),    // 0b1

        // 0b0001 1000 ... (250 +4)
        val8!(0x53, 2),    // 0b00
        val8!(0x44, 2),    // 0b01
        val8!(0x25, 1),    // 0b10
        val8!(0x25, 1),    // 0b11

        // 0b0001 1001 ... (254 +2)
        val8!(0x52, 1),    // 0b0
        val8!(0x5, 1),    // 0b1

        // 0b0001 1100 ... (256 +2)
        val8!(0x34, 1),    // 0b0
        val8!(0x43, 1),    // 0b1

        // 0b0001 1101 ... (258 +2)
        val8!(0x50, 1),    // 0b0
        val8!(0x24, 1),    // 0b1

        // 0b0001 1110 ... (260 +2)
        val8!(0x42, 1),    // 0b0
        val8!(0x33, 1),    // 0b1

        // 0b0000 0000 0000 ... (262 +16)
        jmp8!(388, 3),    // 0b0000
        val8!(0xff, 4),    // 0b0001
        val8!(0xef, 4),    // 0b0010
        val8!(0xdf, 4),    // 0b0011
        val8!(0xee, 4),    // 0b0100
        val8!(0xcf, 4),    // 0b0101
        val8!(0xde, 4),    // 0b0110
        val8!(0xbf, 4),    // 0b0111
        val8!(0xfb, 4),    // 0b1000
        val8!(0xce, 4),    // 0b1001
        val8!(0xdc, 4),    // 0b1010
        jmp8!(396, 1),    // 0b1011
        val8!(0xec, 3),    // 0b1100
        val8!(0xec, 3),    // 0b1101
        val8!(0xdd, 3),    // 0b1110
        val8!(0xdd, 3),    // 0b1111

        // 0b0000 0000 0001 ... (278 +16)
        val8!(0xfa, 4),    // 0b0000
        val8!(0xcd, 4),    // 0b0001
        val8!(0xbe, 3),    // 0b0010
        val8!(0xbe, 3),    // 0b0011
        val8!(0xeb, 3),    // 0b0100
        val8!(0xeb, 3),    // 0b0101
        val8!(0x9f, 3),    // 0b0110
        val8!(0x9f, 3),    // 0b0111
        val8!(0xf9, 3),    // 0b1000
        val8!(0xf9, 3),    // 0b1001
        val8!(0xea, 3),    // 0b1010
        val8!(0xea, 3),    // 0b1011
        val8!(0xbd, 3),    // 0b1100
        val8!(0xbd, 3),    // 0b1101
        val8!(0xdb, 3),    // 0b1110
        val8!(0xdb, 3),    // 0b1111

        // 0b0000 0000 0010 ... (294 +16)
        val8!(0x8f, 3),    // 0b0000
        val8!(0x8f, 3),    // 0b0001
        val8!(0xf8, 3),    // 0b0010
        val8!(0xf8, 3),    // 0b0011
        val8!(0xcc, 3),    // 0b0100
        val8!(0xcc, 3),    // 0b0101
        val8!(0xae, 4),    // 0b0110
        val8!(0x9e, 4),    // 0b0111
        val8!(0x8e, 3),    // 0b1000
        val8!(0x8e, 3),    // 0b1001
        val8!(0x7f, 4),    // 0b1010
        val8!(0x7e, 4),    // 0b1011
        val8!(0xf7, 2),    // 0b1100
        val8!(0xf7, 2),    // 0b1101
        val8!(0xf7, 2),    // 0b1110
        val8!(0xf7, 2),    // 0b1111

        // 0b0000 0000 0011 ... (310 +8)
        val8!(0xda, 2),    // 0b000
        val8!(0xda, 2),    // 0b001
        val8!(0xad, 3),    // 0b010
        val8!(0xbc, 3),    // 0b011
        val8!(0xcb, 3),    // 0b100
        val8!(0xf6, 3),    // 0b101
        val8!(0x6f, 2),    // 0b110
        val8!(0x6f, 2),    // 0b111

        // 0b0000 0000 0100 ... (318 +4)
        val8!(0xe8, 2),    // 0b00
        val8!(0x5f, 2),    // 0b01
        val8!(0x9d, 2),    // 0b10
        val8!(0xd9, 2),    // 0b11

        // 0b0000 0000 0101 ... (322 +4)
        val8!(0xf5, 2),    // 0b00
        val8!(0xe7, 2),    // 0b01
        val8!(0xac, 2),    // 0b10
        val8!(0xbb, 2),    // 0b11

        // 0b0000 0000 0110 ... (326 +8)
        val8!(0x4f, 2),    // 0b000
        val8!(0x4f, 2),    // 0b001
        val8!(0xf4, 2),    // 0b010
        val8!(0xf4, 2),    // 0b011
        val8!(0xca, 3),    // 0b100
        val8!(0xe6, 3),    // 0b101
        val8!(0xf3, 2),    // 0b110
        val8!(0xf3, 2),    // 0b111

        // 0b0000 0000 0111 ... (334 +4)
        val8!(0x3f, 1),    // 0b00
        val8!(0x3f, 1),    // 0b01
        val8!(0x8d, 2),    // 0b10
        val8!(0xd8, 2),    // 0b11

        // 0b0000 0000 1000 ... (338 +2)
        val8!(0x2f, 1),    // 0b0
        val8!(0xf2, 1),    // 0b1

        // 0b0000 0000 1001 ... (340 +4)
        val8!(0x6e, 2),    // 0b00
        val8!(0x9c, 2),    // 0b01
        val8!(0xf, 1),    // 0b10
        val8!(0xf, 1),    // 0b11

        // 0b0000 0000 1010 ... (344 +4)
        val8!(0xc9, 2),    // 0b00
        val8!(0x5e, 2),    // 0b01
        val8!(0xab, 1),    // 0b10
        val8!(0xab, 1),    // 0b11

        // 0b0000 0000 1011 ... (348 +4)
        val8!(0x7d, 2),    // 0b00
        val8!(0xd7, 2),    // 0b01
        val8!(0x4e, 1),    // 0b10
        val8!(0x4e, 1),    // 0b11

        // 0b0000 0000 1100 ... (352 +4)
        val8!(0xc8, 2),    // 0b00
        val8!(0xd6, 2),    // 0b01
        val8!(0x3e, 1),    // 0b10
        val8!(0x3e, 1),    // 0b11

        // 0b0000 0000 1101 ... (356 +4)
        val8!(0xb9, 1),    // 0b00
        val8!(0xb9, 1),    // 0b01
        val8!(0x9b, 2),    // 0b10
        val8!(0xaa, 2),    // 0b11

        // 0b0000 0001 0001 ... (360 +2)
        val8!(0xba, 1),    // 0b0
        val8!(0xe5, 1),    // 0b1

        // 0b0000 0001 0010 ... (362 +2)
        val8!(0xe4, 1),    // 0b0
        val8!(0x8c, 1),    // 0b1

        // 0b0000 0001 0011 ... (364 +2)
        val8!(0x6d, 1),    // 0b0
        val8!(0xe3, 1),    // 0b1

        // 0b0000 0001 0101 ... (366 +2)
        val8!(0x2e, 1),    // 0b0
        val8!(0xe, 1),    // 0b1

        // 0b0000 0001 1000 ... (368 +2)
        val8!(0xe0, 1),    // 0b0
        val8!(0x5d, 1),    // 0b1

        // 0b0000 0001 1001 ... (370 +2)
        val8!(0xd5, 1),    // 0b0
        val8!(0x7c, 1),    // 0b1

        // 0b0000 0001 1010 ... (372 +2)
        val8!(0xc7, 1),    // 0b0
        val8!(0x4d, 1),    // 0b1

        // 0b0000 0001 1011 ... (374 +2)
        val8!(0x8b, 1),    // 0b0
        val8!(0xb8, 1),    // 0b1

        // 0b0000 0001 1100 ... (376 +2)
        val8!(0xd4, 1),    // 0b0
        val8!(0x9a, 1),    // 0b1

        // 0b0000 0001 1101 ... (378 +2)
        val8!(0xa9, 1),    // 0b0
        val8!(0x6c, 1),    // 0b1

        // 0b0000 0010 0000 ... (380 +2)
        val8!(0xd3, 1),    // 0b0
        val8!(0x7b, 1),    // 0b1

        // 0b0000 0010 0101 ... (382 +2)
        val8!(0x5c, 1),    // 0b0
        val8!(0xc5, 1),    // 0b1

        // 0b0000 0010 0110 ... (384 +2)
        val8!(0x99, 1),    // 0b0
        val8!(0x7a, 1),    // 0b1

        // 0b0000 0010 1000 ... (386 +2)
        val8!(0xa7, 1),    // 0b0
        val8!(0x97, 1),    // 0b1

        // 0b0000 0000 0000 0000 ... (388 +8)
        val8!(0xfe, 3),    // 0b000
        val8!(0xfc, 3),    // 0b001
        val8!(0xfd, 2),    // 0b010
        val8!(0xfd, 2),    // 0b011
        val8!(0xed, 1),    // 0b100
        val8!(0xed, 1),    // 0b101
        val8!(0xed, 1),    // 0b110
        val8!(0xed, 1),    // 0b111

        // 0b0000 0000 0000 1011 ... (396 +2)
        val8!(0xaf, 1),    // 0b0
        val8!(0xe9, 1),    // 0b1
    ],
    n_init_bits: 4,
    n_table_bits: 19,
};

pub const HUFFMAN_TABLE_15: HuffmanTable<H8> = HuffmanTable {
    data: &[
        // 0b ... (0 +16)
        jmp8!(16, 4),    // 0b0000
        jmp8!(32, 4),    // 0b0001
        jmp8!(48, 4),    // 0b0010
        jmp8!(64, 4),    // 0b0011
        jmp8!(80, 4),    // 0b0100
        jmp8!(96, 3),    // 0b0101
        jmp8!(104, 3),    // 0b0110
        jmp8!(112, 2),    // 0b0111
        jmp8!(116, 1),    // 0b1000
        jmp8!(118, 1),    // 0b1001
        val8!(0x11, 3),    // 0b1010
        val8!(0x11, 3),    // 0b1011
        val8!(0x1, 4),    // 0b1100
        val8!(0x10, 4),    // 0b1101
        val8!(0x0, 3),    // 0b1110
        val8!(0x0, 3),    // 0b1111

        // 0b0000 ... (16 +16)
        jmp8!(120, 4),    // 0b0000
        jmp8!(136, 4),    // 0b0001
        jmp8!(152, 4),    // 0b0010
        jmp8!(168, 4),    // 0b0011
        jmp8!(184, 4),    // 0b0100
        jmp8!(200, 3),    // 0b0101
        jmp8!(208, 3),    // 0b0110
        jmp8!(216, 4),    // 0b0111
        jmp8!(232, 3),    // 0b1000
        jmp8!(240, 3),    // 0b1001
        jmp8!(248, 3),    // 0b1010
        jmp8!(256, 3),    // 0b1011
        jmp8!(264, 2),    // 0b1100
        jmp8!(268, 3),    // 0b1101
        jmp8!(276, 3),    // 0b1110
        jmp8!(284, 2),    // 0b1111

        // 0b0001 ... (32 +16)
        jmp8!(288, 2),    // 0b0000
        jmp8!(292, 2),    // 0b0001
        jmp8!(296, 2),    // 0b0010
        jmp8!(300, 2),    // 0b0011
        jmp8!(304, 2),    // 0b0100
        jmp8!(308, 2),    // 0b0101
        jmp8!(312, 2),    // 0b0110
        jmp8!(316, 2),    // 0b0111
        jmp8!(320, 1),    // 0b1000
        jmp8!(322, 1),    // 0b1001
        jmp8!(324, 1),    // 0b1010
        jmp8!(326, 2),    // 0b1011
        jmp8!(330, 1),    // 0b1100
        jmp8!(332, 1),    // 0b1101
        jmp8!(334, 2),    // 0b1110
        jmp8!(338, 1),    // 0b1111

        // 0b0010 ... (48 +16)
        jmp8!(340, 1),    // 0b0000
        jmp8!(342, 1),    // 0b0001
        val8!(0x91, 4),    // 0b0010
        jmp8!(344, 1),    // 0b0011
        jmp8!(346, 1),    // 0b0100
        jmp8!(348, 1),    // 0b0101
        jmp8!(350, 1),    // 0b0110
        jmp8!(352, 1),    // 0b0111
        val8!(0x28, 4),    // 0b1000
        val8!(0x82, 4),    // 0b1001
        val8!(0x18, 4),    // 0b1010
        val8!(0x81, 4),    // 0b1011
        jmp8!(354, 1),    // 0b1100
        jmp8!(356, 1),    // 0b1101
        jmp8!(358, 1),    // 0b1110
        jmp8!(360, 1),    // 0b1111

        // 0b0011 ... (64 +16)
        val8!(0x27, 4),    // 0b0000
        val8!(0x72, 4),    // 0b0001
        val8!(0x64, 4),    // 0b0010
        val8!(0x17, 4),    // 0b0011
        val8!(0x55, 4),    // 0b0100
        val8!(0x71, 4),    // 0b0101
        jmp8!(362, 1),    // 0b0110
        val8!(0x36, 4),    // 0b0111
        val8!(0x63, 4),    // 0b1000
        val8!(0x45, 4),    // 0b1001
        val8!(0x54, 4),    // 0b1010
        val8!(0x26, 4),    // 0b1011
        val8!(0x62, 4),    // 0b1100
        val8!(0x16, 4),    // 0b1101
        jmp8!(364, 1),    // 0b1110
        val8!(0x35, 4),    // 0b1111

        // 0b0100 ... (80 +16)
        val8!(0x61, 3),    // 0b0000
        val8!(0x61, 3),    // 0b0001
        val8!(0x53, 4),    // 0b0010
        val8!(0x44, 4),    // 0b0011
        val8!(0x25, 3),    // 0b0100
        val8!(0x25, 3),    // 0b0101
        val8!(0x52, 3),    // 0b0110
        val8!(0x52, 3),    // 0b0111
        val8!(0x15, 3),    // 0b1000
        val8!(0x15, 3),    // 0b1001
        val8!(0x51, 3),    // 0b1010
        val8!(0x51, 3),    // 0b1011
        val8!(0x5, 4),    // 0b1100
        val8!(0x50, 4),    // 0b1101
        val8!(0x34, 3),    // 0b1110
        val8!(0x34, 3),    // 0b1111

        // 0b0101 ... (96 +8)
        val8!(0x43, 3),    // 0b000
        val8!(0x24, 3),    // 0b001
        val8!(0x42, 3),    // 0b010
        val8!(0x33, 3),    // 0b011
        val8!(0x41, 2),    // 0b100
        val8!(0x41, 2),    // 0b101
        val8!(0x14, 3),    // 0b110
        val8!(0x4, 3),    // 0b111

        // 0b0110 ... (104 +8)
        val8!(0x23, 2),    // 0b000
        val8!(0x23, 2),    // 0b001
        val8!(0x32, 2),    // 0b010
        val8!(0x32, 2),    // 0b011
        val8!(0x40, 3),    // 0b100
        val8!(0x3, 3),    // 0b101
        val8!(0x13, 2),    // 0b110
        val8!(0x13, 2),    // 0b111

        // 0b0111 ... (112 +4)
        val8!(0x31, 2),    // 0b00
        val8!(0x30, 2),    // 0b01
        val8!(0x22, 1),    // 0b10
        val8!(0x22, 1),    // 0b11

        // 0b1000 ... (116 +2)
        val8!(0x12, 1),    // 0b0
        val8!(0x21, 1),    // 0b1

        // 0b1001 ... (118 +2)
        val8!(0x2, 1),    // 0b0
        val8!(0x20, 1),    // 0b1

        // 0b0000 0000 ... (120 +16)
        jmp8!(366, 1),    // 0b0000
        jmp8!(368, 1),    // 0b0001
        val8!(0xee, 4),    // 0b0010
        jmp8!(370, 1),    // 0b0011
        jmp8!(372, 1),    // 0b0100
        jmp8!(374, 1),    // 0b0101
        val8!(0xfb, 4),    // 0b0110
        jmp8!(376, 1),    // 0b0111
        val8!(0xdd, 4),    // 0b1000
        val8!(0xaf, 4),    // 0b1001
        val8!(0xfa, 4),    // 0b1010
        val8!(0xbe, 4),    // 0b1011
        val8!(0xeb, 4),    // 0b1100
        val8!(0xcd, 4),    // 0b1101
        val8!(0xdc, 4),    // 0b1110
        val8!(0x9f, 4),    // 0b1111

        // 0b0000 0001 ... (136 +16)
        val8!(0xf9, 4),    // 0b0000
        val8!(0xea, 4),    // 0b0001
        val8!(0xbd, 4),    // 0b0010
        val8!(0xdb, 4),    // 0b0011
        val8!(0x8f, 4),    // 0b0100
        val8!(0xf8, 4),    // 0b0101
        val8!(0xcc, 4),    // 0b0110
        val8!(0x9e, 4),    // 0b0111
        val8!(0xe9, 4),    // 0b1000
        val8!(0x7f, 4),    // 0b1001
        val8!(0xf7, 4),    // 0b1010
        val8!(0xad, 4),    // 0b1011
        val8!(0xda, 4),    // 0b1100
        val8!(0xbc, 4),    // 0b1101
        val8!(0x6f, 4),    // 0b1110
        jmp8!(378, 1),    // 0b1111

        // 0b0000 0010 ... (152 +16)
        val8!(0xcb, 3),    // 0b0000
        val8!(0xcb, 3),    // 0b0001
        val8!(0xf6, 3),    // 0b0010
        val8!(0xf6, 3),    // 0b0011
        val8!(0x8e, 4),    // 0b0100
        val8!(0xe8, 4),    // 0b0101
        val8!(0x5f, 4),    // 0b0110
        val8!(0x9d, 4),    // 0b0111
        val8!(0xf5, 3),    // 0b1000
        val8!(0xf5, 3),    // 0b1001
        val8!(0x7e, 3),    // 0b1010
        val8!(0x7e, 3),    // 0b1011
        val8!(0xe7, 3),    // 0b1100
        val8!(0xe7, 3),    // 0b1101
        val8!(0xac, 3),    // 0b1110
        val8!(0xac, 3),    // 0b1111

        // 0b0000 0011 ... (168 +16)
        val8!(0xca, 3),    // 0b0000
        val8!(0xca, 3),    // 0b0001
        val8!(0xbb, 3),    // 0b0010
        val8!(0xbb, 3),    // 0b0011
        val8!(0xd9, 4),    // 0b0100
        val8!(0x8d, 4),    // 0b0101
        val8!(0x4f, 3),    // 0b0110
        val8!(0x4f, 3),    // 0b0111
        val8!(0xf4, 3),    // 0b1000
        val8!(0xf4, 3),    // 0b1001
        val8!(0x3f, 3),    // 0b1010
        val8!(0x3f, 3),    // 0b1011
        val8!(0xf3, 3),    // 0b1100
        val8!(0xf3, 3),    // 0b1101
        val8!(0xd8, 3),    // 0b1110
        val8!(0xd8, 3),    // 0b1111

        // 0b0000 0100 ... (184 +16)
        val8!(0xe6, 3),    // 0b0000
        val8!(0xe6, 3),    // 0b0001
        val8!(0x2f, 3),    // 0b0010
        val8!(0x2f, 3),    // 0b0011
        val8!(0xf2, 3),    // 0b0100
        val8!(0xf2, 3),    // 0b0101
        val8!(0x6e, 4),    // 0b0110
        val8!(0xf0, 4),    // 0b0111
        val8!(0x1f, 3),    // 0b1000
        val8!(0x1f, 3),    // 0b1001
        val8!(0xf1, 3),    // 0b1010
        val8!(0xf1, 3),    // 0b1011
        val8!(0x9c, 3),    // 0b1100
        val8!(0x9c, 3),    // 0b1101
        val8!(0xc9, 3),    // 0b1110
        val8!(0xc9, 3),    // 0b1111

        // 0b0000 0101 ... (200 +8)
        val8!(0x5e, 3),    // 0b000
        val8!(0xab, 3),    // 0b001
        val8!(0xba, 3),    // 0b010
        val8!(0xe5, 3),    // 0b011
        val8!(0x7d, 3),    // 0b100
        val8!(0xd7, 3),    // 0b101
        val8!(0x4e, 3),    // 0b110
        val8!(0xe4, 3),    // 0b111

        // 0b0000 0110 ... (208 +8)
        val8!(0x8c, 3),    // 0b000
        val8!(0xc8, 3),    // 0b001
        val8!(0x3e, 3),    // 0b010
        val8!(0x6d, 3),    // 0b011
        val8!(0xd6, 3),    // 0b100
        val8!(0xe3, 3),    // 0b101
        val8!(0x9b, 3),    // 0b110
        val8!(0xb9, 3),    // 0b111

        // 0b0000 0111 ... (216 +16)
        val8!(0x2e, 3),    // 0b0000
        val8!(0x2e, 3),    // 0b0001
        val8!(0xaa, 3),    // 0b0010
        val8!(0xaa, 3),    // 0b0011
        val8!(0xe2, 3),    // 0b0100
        val8!(0xe2, 3),    // 0b0101
        val8!(0x1e, 3),    // 0b0110
        val8!(0x1e, 3),    // 0b0111
        val8!(0xe1, 3),    // 0b1000
        val8!(0xe1, 3),    // 0b1001
        val8!(0xe, 4),    // 0b1010
        val8!(0xe0, 4),    // 0b1011
        val8!(0x5d, 3),    // 0b1100
        val8!(0x5d, 3),    // 0b1101
        val8!(0xd5, 3),    // 0b1110
        val8!(0xd5, 3),    // 0b1111

        // 0b0000 1000 ... (232 +8)
        val8!(0x7c, 3),    // 0b000
        val8!(0xc7, 3),    // 0b001
        val8!(0x4d, 3),    // 0b010
        val8!(0x8b, 3),    // 0b011
        val8!(0xd4, 2),    // 0b100
        val8!(0xd4, 2),    // 0b101
        val8!(0xb8, 3),    // 0b110
        val8!(0x9a, 3),    // 0b111

        // 0b0000 1001 ... (240 +8)
        val8!(0xa9, 3),    // 0b000
        val8!(0x6c, 3),    // 0b001
        val8!(0xc6, 3),    // 0b010
        val8!(0x3d, 3),    // 0b011
        val8!(0xd3, 2),    // 0b100
        val8!(0xd3, 2),    // 0b101
        val8!(0xd2, 2),    // 0b110
        val8!(0xd2, 2),    // 0b111

        // 0b0000 1010 ... (248 +8)
        val8!(0x2d, 3),    // 0b000
        val8!(0xd, 3),    // 0b001
        val8!(0x1d, 2),    // 0b010
        val8!(0x1d, 2),    // 0b011
        val8!(0x7b, 2),    // 0b100
        val8!(0x7b, 2),    // 0b101
        val8!(0xb7, 2),    // 0b110
        val8!(0xb7, 2),    // 0b111

        // 0b0000 1011 ... (256 +8)
        val8!(0xd1, 2),    // 0b000
        val8!(0xd1, 2),    // 0b001
        val8!(0x5c, 3),    // 0b010
        val8!(0xd0, 3),    // 0b011
        val8!(0xc5, 2),    // 0b100
        val8!(0xc5, 2),    // 0b101
        val8!(0x8a, 2),    // 0b110
        val8!(0x8a, 2),    // 0b111

        // 0b0000 1100 ... (264 +4)
        val8!(0xa8, 2),    // 0b00
        val8!(0x4c, 2),    // 0b01
        val8!(0xc4, 2),    // 0b10
        val8!(0x6b, 2),    // 0b11

        // 0b0000 1101 ... (268 +8)
        val8!(0xb6, 2),    // 0b000
        val8!(0xb6, 2),    // 0b001
        val8!(0x99, 3),    // 0b010
        val8!(0xc, 3),    // 0b011
        val8!(0x3c, 2),    // 0b100
        val8!(0x3c, 2),    // 0b101
        val8!(0xc3, 2),    // 0b110
        val8!(0xc3, 2),    // 0b111

        // 0b0000 1110 ... (276 +8)
        val8!(0x7a, 2),    // 0b000
        val8!(0x7a, 2),    // 0b001
        val8!(0xa7, 2),    // 0b010
        val8!(0xa7, 2),    // 0b011
        val8!(0xa6, 2),    // 0b100
        val8!(0xa6, 2),    // 0b101
        val8!(0xc0, 3),    // 0b110
        val8!(0xb, 3),    // 0b111

        // 0b0000 1111 ... (284 +4)
        val8!(0xc2, 1),    // 0b00
        val8!(0xc2, 1),    // 0b01
        val8!(0x2c, 2),    // 0b10
        val8!(0x5b, 2),    // 0b11

        // 0b0001 0000 ... (288 +4)
        val8!(0xb5, 2),    // 0b00
        val8!(0x1c, 2),    // 0b01
        val8!(0x89, 2),    // 0b10
        val8!(0x98, 2),    // 0b11

        // 0b0001 0001 ... (292 +4)
        val8!(0xc1, 2),    // 0b00
        val8!(0x4b, 2),    // 0b01
        val8!(0xb4, 2),    // 0b10
        val8!(0x6a, 2),    // 0b11

        // 0b0001 0010 ... (296 +4)
        val8!(0x3b, 2),    // 0b00
        val8!(0x79, 2),    // 0b01
        val8!(0xb3, 1),    // 0b10
        val8!(0xb3, 1),    // 0b11

        // 0b0001 0011 ... (300 +4)
        val8!(0x97, 2),    // 0b00
        val8!(0x88, 2),    // 0b01
        val8!(0x2b, 2),    // 0b10
        val8!(0x5a, 2),    // 0b11

        // 0b0001 0100 ... (304 +4)
        val8!(0xb2, 1),    // 0b00
        val8!(0xb2, 1),    // 0b01
        val8!(0xa5, 2),    // 0b10
        val8!(0x1b, 2),    // 0b11

        // 0b0001 0101 ... (308 +4)
        val8!(0xb1, 1),    // 0b00
        val8!(0xb1, 1),    // 0b01
        val8!(0xb0, 2),    // 0b10
        val8!(0x69, 2),    // 0b11

        // 0b0001 0110 ... (312 +4)
        val8!(0x96, 2),    // 0b00
        val8!(0x4a, 2),    // 0b01
        val8!(0xa4, 2),    // 0b10
        val8!(0x78, 2),    // 0b11

        // 0b0001 0111 ... (316 +4)
        val8!(0x87, 2),    // 0b00
        val8!(0x3a, 2),    // 0b01
        val8!(0xa3, 1),    // 0b10
        val8!(0xa3, 1),    // 0b11

        // 0b0001 1000 ... (320 +2)
        val8!(0x59, 1),    // 0b0
        val8!(0x95, 1),    // 0b1

        // 0b0001 1001 ... (322 +2)
        val8!(0x2a, 1),    // 0b0
        val8!(0xa2, 1),    // 0b1

        // 0b0001 1010 ... (324 +2)
        val8!(0x1a, 1),    // 0b0
        val8!(0xa1, 1),    // 0b1

        // 0b0001 1011 ... (326 +4)
        val8!(0xa, 2),    // 0b00
        val8!(0xa0, 2),    // 0b01
        val8!(0x68, 1),    // 0b10
        val8!(0x68, 1),    // 0b11

        // 0b0001 1100 ... (330 +2)
        val8!(0x86, 1),    // 0b0
        val8!(0x49, 1),    // 0b1

        // 0b0001 1101 ... (332 +2)
        val8!(0x94, 1),    // 0b0
        val8!(0x39, 1),    // 0b1

        // 0b0001 1110 ... (334 +4)
        val8!(0x93, 1),    // 0b00
        val8!(0x93, 1),    // 0b01
        val8!(0x77, 2),    // 0b10
        val8!(0x9, 2),    // 0b11

        // 0b0001 1111 ... (338 +2)
        val8!(0x58, 1),    // 0b0
        val8!(0x85, 1),    // 0b1

        // 0b0010 0000 ... (340 +2)
        val8!(0x29, 1),    // 0b0
        val8!(0x67, 1),    // 0b1

        // 0b0010 0001 ... (342 +2)
        val8!(0x76, 1),    // 0b0
        val8!(0x92, 1),    // 0b1

        // 0b0010 0011 ... (344 +2)
        val8!(0x19, 1),    // 0b0
        val8!(0x90, 1),    // 0b1

        // 0b0010 0100 ... (346 +2)
        val8!(0x48, 1),    // 0b0
        val8!(0x84, 1),    // 0b1

        // 0b0010 0101 ... (348 +2)
        val8!(0x57, 1),    // 0b0
        val8!(0x75, 1),    // 0b1

        // 0b0010 0110 ... (350 +2)
        val8!(0x38, 1),    // 0b0
        val8!(0x83, 1),    // 0b1

        // 0b0010 0111 ... (352 +2)
        val8!(0x66, 1),    // 0b0
        val8!(0x47, 1),    // 0b1

        // 0b0010 1100 ... (354 +2)
        val8!(0x74, 1),    // 0b0
        val8!(0x8, 1),    // 0b1

        // 0b0010 1101 ... (356 +2)
        val8!(0x80, 1),    // 0b0
        val8!(0x56, 1),    // 0b1

        // 0b0010 1110 ... (358 +2)
        val8!(0x65, 1),    // 0b0
        val8!(0x37, 1),    // 0b1

        // 0b0010 1111 ... (360 +2)
        val8!(0x73, 1),    // 0b0
        val8!(0x46, 1),    // 0b1

        // 0b0011 0110 ... (362 +2)
        val8!(0x7, 1),    // 0b0
        val8!(0x70, 1),    // 0b1

        // 0b0011 1110 ... (364 +2)
        val8!(0x6, 1),    // 0b0
        val8!(0x60, 1),    // 0b1

        // 0b0000 0000 0000 ... (366 +2)
        val8!(0xff, 1),    // 0b0
        val8!(0xef, 1),    // 0b1

        // 0b0000 0000 0001 ... (368 +2)
        val8!(0xfe, 1),    // 0b0
        val8!(0xdf, 1),    // 0b1

        // 0b0000 0000 0011 ... (370 +2)
        val8!(0xfd, 1),    // 0b0
        val8!(0xcf, 1),    // 0b1

        // 0b0000 0000 0100 ... (372 +2)
        val8!(0xfc, 1),    // 0b0
        val8!(0xde, 1),    // 0b1

        // 0b0000 0000 0101 ... (374 +2)
        val8!(0xed, 1),    // 0b0
        val8!(0xbf, 1),    // 0b1

        // 0b0000 0000 0111 ... (376 +2)
        val8!(0xce, 1),    // 0b0
        val8!(0xec, 1),    // 0b1

        // 0b0000 0001 1111 ... (378 +2)
        val8!(0xae, 1),    // 0b0
        val8!(0xf, 1),    // 0b1
    ],
    n_init_bits: 4,
    n_table_bits: 13,
};

pub const HUFFMAN_TABLE_16: HuffmanTable<H8> = HuffmanTable {
    data: &[
        // 0b ... (0 +16)
        jmp8!(16, 4),    // 0b0000
        jmp8!(32, 4),    // 0b0001
        jmp8!(48, 4),    // 0b0010
        jmp8!(64, 2),    // 0b0011
        val8!(0x11, 4),    // 0b0100
        val8!(0x1, 4),    // 0b0101
        val8!(0x10, 3),    // 0b0110
        val8!(0x10, 3),    // 0b0111
        val8!(0x0, 1),    // 0b1000
        val8!(0x0, 1),    // 0b1001
        val8!(0x0, 1),    // 0b1010
        val8!(0x0, 1),    // 0b1011
        val8!(0x0, 1),    // 0b1100
        val8!(0x0, 1),    // 0b1101
        val8!(0x0, 1),    // 0b1110
        val8!(0x0, 1),    // 0b1111

        // 0b0000 ... (16 +16)
        jmp8!(68, 3),    // 0b0000
        jmp8!(76, 3),    // 0b0001
        jmp8!(84, 2),    // 0b0010
        val8!(0xff, 4),    // 0b0011
        jmp8!(88, 2),    // 0b0100
        jmp8!(92, 1),    // 0b0101
        jmp8!(94, 4),    // 0b0110
        val8!(0xf2, 4),    // 0b0111
        jmp8!(110, 1),    // 0b1000
        val8!(0x1f, 4),    // 0b1001
        val8!(0xf1, 4),    // 0b1010
        jmp8!(112, 4),    // 0b1011
        jmp8!(128, 4),    // 0b1100
        jmp8!(144, 4),    // 0b1101
        jmp8!(160, 4),    // 0b1110
        jmp8!(176, 4),    // 0b1111

        // 0b0001 ... (32 +16)
        jmp8!(192, 4),    // 0b0000
        jmp8!(208, 3),    // 0b0001
        jmp8!(216, 3),    // 0b0010
        jmp8!(224, 3),    // 0b0011
        jmp8!(232, 3),    // 0b0100
        jmp8!(240, 3),    // 0b0101
        jmp8!(248, 3),    // 0b0110
        jmp8!(256, 3),    // 0b0111
        jmp8!(264, 2),    // 0b1000
        jmp8!(268, 2),    // 0b1001
        jmp8!(272, 1),    // 0b1010
        jmp8!(274, 2),    // 0b1011
        jmp8!(278, 2),    // 0b1100
        jmp8!(282, 1),    // 0b1101
        val8!(0x51, 4),    // 0b1110
        jmp8!(284, 1),    // 0b1111

        // 0b0010 ... (48 +16)
        jmp8!(286, 1),    // 0b0000
        jmp8!(288, 1),    // 0b0001
        jmp8!(290, 1),    // 0b0010
        val8!(0x14, 4),    // 0b0011
        val8!(0x41, 4),    // 0b0100
        jmp8!(292, 1),    // 0b0101
        val8!(0x23, 4),    // 0b0110
        val8!(0x32, 4),    // 0b0111
        val8!(0x13, 3),    // 0b1000
        val8!(0x13, 3),    // 0b1001
        val8!(0x31, 3),    // 0b1010
        val8!(0x31, 3),    // 0b1011
        val8!(0x3, 4),    // 0b1100
        val8!(0x30, 4),    // 0b1101
        val8!(0x22, 3),    // 0b1110
        val8!(0x22, 3),    // 0b1111

        // 0b0011 ... (64 +4)
        val8!(0x12, 2),    // 0b00
        val8!(0x21, 2),    // 0b01
        val8!(0x2, 2),    // 0b10
        val8!(0x20, 2),    // 0b11

        // 0b0000 0000 ... (68 +8)
        val8!(0xef, 3),    // 0b000
        val8!(0xfe, 3),    // 0b001
        val8!(0xdf, 3),    // 0b010
        val8!(0xfd, 3),    // 0b011
        val8!(0xcf, 3),    // 0b100
        val8!(0xfc, 3),    // 0b101
        val8!(0xbf, 3),    // 0b110
        val8!(0xfb, 3),    // 0b111

        // 0b0000 0001 ... (76 +8)
        val8!(0xaf, 2),    // 0b000
        val8!(0xaf, 2),    // 0b001
        val8!(0xfa, 3),    // 0b010
        val8!(0x9f, 3),    // 0b011
        val8!(0xf9, 3),    // 0b100
        val8!(0xf8, 3),    // 0b101
        val8!(0x8f, 2),    // 0b110
        val8!(0x8f, 2),    // 0b111

        // 0b0000 0010 ... (84 +4)
        val8!(0x7f, 2),    // 0b00
        val8!(0xf7, 2),    // 0b01
        val8!(0x6f, 2),    // 0b10
        val8!(0xf6, 2),    // 0b11

        // 0b0000 0100 ... (88 +4)
        val8!(0x5f, 2),    // 0b00
        val8!(0xf5, 2),    // 0b01
        val8!(0x4f, 1),    // 0b10
        val8!(0x4f, 1),    // 0b11

        // 0b0000 0101 ... (92 +2)
        val8!(0xf4, 1),    // 0b0
        val8!(0xf3, 1),    // 0b1

        // 0b0000 0110 ... (94 +16)
        val8!(0xf0, 1),    // 0b0000
        val8!(0xf0, 1),    // 0b0001
        val8!(0xf0, 1),    // 0b0010
        val8!(0xf0, 1),    // 0b0011
        val8!(0xf0, 1),    // 0b0100
        val8!(0xf0, 1),    // 0b0101
        val8!(0xf0, 1),    // 0b0110
        val8!(0xf0, 1),    // 0b0111
        val8!(0x3f, 2),    // 0b1000
        val8!(0x3f, 2),    // 0b1001
        val8!(0x3f, 2),    // 0b1010
        val8!(0x3f, 2),    // 0b1011
        jmp8!(294, 4),    // 0b1100
        jmp8!(310, 3),    // 0b1101
        jmp8!(318, 3),    // 0b1110
        jmp8!(326, 3),    // 0b1111

        // 0b0000 1000 ... (110 +2)
        val8!(0x2f, 1),    // 0b0
        val8!(0xf, 1),    // 0b1

        // 0b0000 1011 ... (112 +16)
        jmp8!(334, 2),    // 0b0000
        jmp8!(338, 2),    // 0b0001
        jmp8!(342, 2),    // 0b0010
        jmp8!(346, 1),    // 0b0011
        jmp8!(348, 2),    // 0b0100
        jmp8!(352, 2),    // 0b0101
        jmp8!(356, 1),    // 0b0110
        jmp8!(358, 2),    // 0b0111
        jmp8!(362, 2),    // 0b1000
        jmp8!(366, 2),    // 0b1001
        jmp8!(370, 2),    // 0b1010
        val8!(0xe3, 4),    // 0b1011
        jmp8!(374, 1),    // 0b1100
        jmp8!(376, 1),    // 0b1101
        jmp8!(378, 1),    // 0b1110
        jmp8!(380, 1),    // 0b1111

        // 0b0000 1100 ... (128 +16)
        jmp8!(382, 1),    // 0b0000
        jmp8!(384, 1),    // 0b0001
        jmp8!(386, 1),    // 0b0010
        val8!(0xd, 4),    // 0b0011
        jmp8!(388, 1),    // 0b0100
        jmp8!(390, 1),    // 0b0101
        jmp8!(392, 1),    // 0b0110
        val8!(0x3c, 4),    // 0b0111
        jmp8!(394, 1),    // 0b1000
        val8!(0x1c, 4),    // 0b1001
        val8!(0xc0, 4),    // 0b1010
        jmp8!(396, 1),    // 0b1011
        val8!(0xe2, 3),    // 0b1100
        val8!(0xe2, 3),    // 0b1101
        val8!(0x2e, 4),    // 0b1110
        val8!(0x1e, 4),    // 0b1111

        // 0b0000 1101 ... (144 +16)
        val8!(0xd3, 4),    // 0b0000
        val8!(0x2d, 4),    // 0b0001
        val8!(0xd2, 4),    // 0b0010
        val8!(0xd1, 4),    // 0b0011
        val8!(0x3b, 4),    // 0b0100
        jmp8!(398, 1),    // 0b0101
        val8!(0x1d, 3),    // 0b0110
        val8!(0x1d, 3),    // 0b0111
        val8!(0xc4, 4),    // 0b1000
        val8!(0x6b, 4),    // 0b1001
        val8!(0xc3, 4),    // 0b1010
        val8!(0xa7, 4),    // 0b1011
        val8!(0x2c, 3),    // 0b1100
        val8!(0x2c, 3),    // 0b1101
        val8!(0xc2, 4),    // 0b1110
        val8!(0xb5, 4),    // 0b1111

        // 0b0000 1110 ... (160 +16)
        val8!(0xc1, 4),    // 0b0000
        val8!(0xc, 4),    // 0b0001
        val8!(0x4b, 4),    // 0b0010
        val8!(0xb4, 4),    // 0b0011
        val8!(0x6a, 4),    // 0b0100
        val8!(0xa6, 4),    // 0b0101
        val8!(0xb3, 3),    // 0b0110
        val8!(0xb3, 3),    // 0b0111
        val8!(0x5a, 4),    // 0b1000
        val8!(0xa5, 4),    // 0b1001
        val8!(0x2b, 3),    // 0b1010
        val8!(0x2b, 3),    // 0b1011
        val8!(0xb2, 3),    // 0b1100
        val8!(0xb2, 3),    // 0b1101
        val8!(0x1b, 3),    // 0b1110
        val8!(0x1b, 3),    // 0b1111

        // 0b0000 1111 ... (176 +16)
        val8!(0xb1, 3),    // 0b0000
        val8!(0xb1, 3),    // 0b0001
        val8!(0xb, 4),    // 0b0010
        val8!(0xb0, 4),    // 0b0011
        val8!(0x69, 4),    // 0b0100
        val8!(0x96, 4),    // 0b0101
        val8!(0x4a, 4),    // 0b0110
        val8!(0xa4, 4),    // 0b0111
        val8!(0x78, 4),    // 0b1000
        val8!(0x87, 4),    // 0b1001
        val8!(0xa3, 3),    // 0b1010
        val8!(0xa3, 3),    // 0b1011
        val8!(0x3a, 4),    // 0b1100
        val8!(0x59, 4),    // 0b1101
        val8!(0x2a, 3),    // 0b1110
        val8!(0x2a, 3),    // 0b1111

        // 0b0001 0000 ... (192 +16)
        val8!(0x95, 4),    // 0b0000
        val8!(0x68, 4),    // 0b0001
        val8!(0xa1, 3),    // 0b0010
        val8!(0xa1, 3),    // 0b0011
        val8!(0x86, 4),    // 0b0100
        val8!(0x77, 4),    // 0b0101
        val8!(0x94, 3),    // 0b0110
        val8!(0x94, 3),    // 0b0111
        val8!(0x49, 4),    // 0b1000
        val8!(0x57, 4),    // 0b1001
        val8!(0x67, 3),    // 0b1010
        val8!(0x67, 3),    // 0b1011
        val8!(0xa2, 2),    // 0b1100
        val8!(0xa2, 2),    // 0b1101
        val8!(0xa2, 2),    // 0b1110
        val8!(0xa2, 2),    // 0b1111

        // 0b0001 0001 ... (208 +8)
        val8!(0x1a, 2),    // 0b000
        val8!(0x1a, 2),    // 0b001
        val8!(0xa, 3),    // 0b010
        val8!(0xa0, 3),    // 0b011
        val8!(0x39, 3),    // 0b100
        val8!(0x93, 3),    // 0b101
        val8!(0x58, 3),    // 0b110
        val8!(0x85, 3),    // 0b111

        // 0b0001 0010 ... (216 +8)
        val8!(0x29, 2),    // 0b000
        val8!(0x29, 2),    // 0b001
        val8!(0x92, 2),    // 0b010
        val8!(0x92, 2),    // 0b011
        val8!(0x76, 3),    // 0b100
        val8!(0x9, 3),    // 0b101
        val8!(0x19, 2),    // 0b110
        val8!(0x19, 2),    // 0b111

        // 0b0001 0011 ... (224 +8)
        val8!(0x91, 2),    // 0b000
        val8!(0x91, 2),    // 0b001
        val8!(0x90, 3),    // 0b010
        val8!(0x48, 3),    // 0b011
        val8!(0x84, 3),    // 0b100
        val8!(0x75, 3),    // 0b101
        val8!(0x38, 3),    // 0b110
        val8!(0x83, 3),    // 0b111

        // 0b0001 0100 ... (232 +8)
        val8!(0x66, 3),    // 0b000
        val8!(0x28, 3),    // 0b001
        val8!(0x82, 2),    // 0b010
        val8!(0x82, 2),    // 0b011
        val8!(0x47, 3),    // 0b100
        val8!(0x74, 3),    // 0b101
        val8!(0x18, 2),    // 0b110
        val8!(0x18, 2),    // 0b111

        // 0b0001 0101 ... (240 +8)
        val8!(0x81, 2),    // 0b000
        val8!(0x81, 2),    // 0b001
        val8!(0x80, 2),    // 0b010
        val8!(0x80, 2),    // 0b011
        val8!(0x8, 3),    // 0b100
        val8!(0x56, 3),    // 0b101
        val8!(0x37, 2),    // 0b110
        val8!(0x37, 2),    // 0b111

        // 0b0001 0110 ... (248 +8)
        val8!(0x73, 2),    // 0b000
        val8!(0x73, 2),    // 0b001
        val8!(0x65, 3),    // 0b010
        val8!(0x46, 3),    // 0b011
        val8!(0x27, 2),    // 0b100
        val8!(0x27, 2),    // 0b101
        val8!(0x72, 2),    // 0b110
        val8!(0x72, 2),    // 0b111

        // 0b0001 0111 ... (256 +8)
        val8!(0x64, 3),    // 0b000
        val8!(0x55, 3),    // 0b001
        val8!(0x7, 2),    // 0b010
        val8!(0x7, 2),    // 0b011
        val8!(0x17, 1),    // 0b100
        val8!(0x17, 1),    // 0b101
        val8!(0x17, 1),    // 0b110
        val8!(0x17, 1),    // 0b111

        // 0b0001 1000 ... (264 +4)
        val8!(0x71, 1),    // 0b00
        val8!(0x71, 1),    // 0b01
        val8!(0x70, 2),    // 0b10
        val8!(0x36, 2),    // 0b11

        // 0b0001 1001 ... (268 +4)
        val8!(0x63, 2),    // 0b00
        val8!(0x45, 2),    // 0b01
        val8!(0x54, 2),    // 0b10
        val8!(0x26, 2),    // 0b11

        // 0b0001 1010 ... (272 +2)
        val8!(0x62, 1),    // 0b0
        val8!(0x16, 1),    // 0b1

        // 0b0001 1011 ... (274 +4)
        val8!(0x61, 1),    // 0b00
        val8!(0x61, 1),    // 0b01
        val8!(0x6, 2),    // 0b10
        val8!(0x60, 2),    // 0b11

        // 0b0001 1100 ... (278 +4)
        val8!(0x53, 1),    // 0b00
        val8!(0x53, 1),    // 0b01
        val8!(0x35, 2),    // 0b10
        val8!(0x44, 2),    // 0b11

        // 0b0001 1101 ... (282 +2)
        val8!(0x25, 1),    // 0b0
        val8!(0x52, 1),    // 0b1

        // 0b0001 1111 ... (284 +2)
        val8!(0x15, 1),    // 0b0
        val8!(0x5, 1),    // 0b1

        // 0b0010 0000 ... (286 +2)
        val8!(0x34, 1),    // 0b0
        val8!(0x43, 1),    // 0b1

        // 0b0010 0001 ... (288 +2)
        val8!(0x50, 1),    // 0b0
        val8!(0x24, 1),    // 0b1

        // 0b0010 0010 ... (290 +2)
        val8!(0x42, 1),    // 0b0
        val8!(0x33, 1),    // 0b1

        // 0b0010 0101 ... (292 +2)
        val8!(0x4, 1),    // 0b0
        val8!(0x40, 1),    // 0b1

        // 0b0000 0110 1100 ... (294 +16)
        val8!(0xce, 4),    // 0b0000
        jmp8!(400, 1),    // 0b0001
        val8!(0xde, 3),    // 0b0010
        val8!(0xde, 3),    // 0b0011
        val8!(0xe9, 3),    // 0b0100
        val8!(0xe9, 3),    // 0b0101
        val8!(0xea, 4),    // 0b0110
        val8!(0xd9, 4),    // 0b0111
        val8!(0xee, 2),    // 0b1000
        val8!(0xee, 2),    // 0b1001
        val8!(0xee, 2),    // 0b1010
        val8!(0xee, 2),    // 0b1011
        val8!(0xed, 3),    // 0b1100
        val8!(0xed, 3),    // 0b1101
        val8!(0xeb, 3),    // 0b1110
        val8!(0xeb, 3),    // 0b1111

        // 0b0000 0110 1101 ... (310 +8)
        val8!(0xbe, 2),    // 0b000
        val8!(0xbe, 2),    // 0b001
        val8!(0xcd, 2),    // 0b010
        val8!(0xcd, 2),    // 0b011
        val8!(0xdc, 3),    // 0b100
        val8!(0xdb, 3),    // 0b101
        val8!(0xae, 2),    // 0b110
        val8!(0xae, 2),    // 0b111

        // 0b0000 0110 1110 ... (318 +8)
        val8!(0xcc, 2),    // 0b000
        val8!(0xcc, 2),    // 0b001
        val8!(0xad, 3),    // 0b010
        val8!(0xda, 3),    // 0b011
        val8!(0x7e, 3),    // 0b100
        val8!(0xac, 3),    // 0b101
        val8!(0xca, 2),    // 0b110
        val8!(0xca, 2),    // 0b111

        // 0b0000 0110 1111 ... (326 +8)
        val8!(0xc9, 3),    // 0b000
        val8!(0x7d, 3),    // 0b001
        val8!(0x5e, 2),    // 0b010
        val8!(0x5e, 2),    // 0b011
        val8!(0xbd, 1),    // 0b100
        val8!(0xbd, 1),    // 0b101
        val8!(0xbd, 1),    // 0b110
        val8!(0xbd, 1),    // 0b111

        // 0b0000 1011 0000 ... (334 +4)
        val8!(0x9e, 1),    // 0b00
        val8!(0x9e, 1),    // 0b01
        val8!(0xbc, 2),    // 0b10
        val8!(0xcb, 2),    // 0b11

        // 0b0000 1011 0001 ... (338 +4)
        val8!(0x8e, 2),    // 0b00
        val8!(0xe8, 2),    // 0b01
        val8!(0x9d, 2),    // 0b10
        val8!(0xe7, 2),    // 0b11

        // 0b0000 1011 0010 ... (342 +4)
        val8!(0xbb, 2),    // 0b00
        val8!(0x8d, 2),    // 0b01
        val8!(0xd8, 2),    // 0b10
        val8!(0x6e, 2),    // 0b11

        // 0b0000 1011 0011 ... (346 +2)
        val8!(0xe6, 1),    // 0b0
        val8!(0x9c, 1),    // 0b1

        // 0b0000 1011 0100 ... (348 +4)
        val8!(0xab, 2),    // 0b00
        val8!(0xba, 2),    // 0b01
        val8!(0xe5, 2),    // 0b10
        val8!(0xd7, 2),    // 0b11

        // 0b0000 1011 0101 ... (352 +4)
        val8!(0x4e, 1),    // 0b00
        val8!(0x4e, 1),    // 0b01
        val8!(0xe4, 2),    // 0b10
        val8!(0x8c, 2),    // 0b11

        // 0b0000 1011 0110 ... (356 +2)
        val8!(0xc8, 1),    // 0b0
        val8!(0x3e, 1),    // 0b1

        // 0b0000 1011 0111 ... (358 +4)
        val8!(0x6d, 1),    // 0b00
        val8!(0x6d, 1),    // 0b01
        val8!(0xd6, 2),    // 0b10
        val8!(0x9b, 2),    // 0b11

        // 0b0000 1011 1000 ... (362 +4)
        val8!(0xb9, 2),    // 0b00
        val8!(0xaa, 2),    // 0b01
        val8!(0xe1, 1),    // 0b10
        val8!(0xe1, 1),    // 0b11

        // 0b0000 1011 1001 ... (366 +4)
        val8!(0xd4, 1),    // 0b00
        val8!(0xd4, 1),    // 0b01
        val8!(0xb8, 2),    // 0b10
        val8!(0xa9, 2),    // 0b11

        // 0b0000 1011 1010 ... (370 +4)
        val8!(0x7b, 1),    // 0b00
        val8!(0x7b, 1),    // 0b01
        val8!(0xb7, 2),    // 0b10
        val8!(0xd0, 2),    // 0b11

        // 0b0000 1011 1100 ... (374 +2)
        val8!(0xe, 1),    // 0b0
        val8!(0xe0, 1),    // 0b1

        // 0b0000 1011 1101 ... (376 +2)
        val8!(0x5d, 1),    // 0b0
        val8!(0xd5, 1),    // 0b1

        // 0b0000 1011 1110 ... (378 +2)
        val8!(0x7c, 1),    // 0b0
        val8!(0xc7, 1),    // 0b1

        // 0b0000 1011 1111 ... (380 +2)
        val8!(0x4d, 1),    // 0b0
        val8!(0x8b, 1),    // 0b1

        // 0b0000 1100 0000 ... (382 +2)
        val8!(0x9a, 1),    // 0b0
        val8!(0x6c, 1),    // 0b1

        // 0b0000 1100 0001 ... (384 +2)
        val8!(0xc6, 1),    // 0b0
        val8!(0x3d, 1),    // 0b1

        // 0b0000 1100 0010 ... (386 +2)
        val8!(0x5c, 1),    // 0b0
        val8!(0xc5, 1),    // 0b1

        // 0b0000 1100 0100 ... (388 +2)
        val8!(0x8a, 1),    // 0b0
        val8!(0xa8, 1),    // 0b1

        // 0b0000 1100 0101 ... (390 +2)
        val8!(0x99, 1),    // 0b0
        val8!(0x4c, 1),    // 0b1

        // 0b0000 1100 0110 ... (392 +2)
        val8!(0xb6, 1),    // 0b0
        val8!(0x7a, 1),    // 0b1

        // 0b0000 1100 1000 ... (394 +2)
        val8!(0x5b, 1),    // 0b0
        val8!(0x89, 1),    // 0b1

        // 0b0000 1100 1011 ... (396 +2)
        val8!(0x98, 1),    // 0b0
        val8!(0x79, 1),    // 0b1

        // 0b0000 1101 0101 ... (398 +2)
        val8!(0x97, 1),    // 0b0
        val8!(0x88, 1),    // 0b1

        // 0b0000 0110 1100 0001 ... (400 +2)
        val8!(0xec, 1),    // 0b0
        val8!(0xdd, 1),    // 0b1
    ],
    n_init_bits: 4,
    n_table_bits: 17,
};

pub const HUFFMAN_TABLE_24: HuffmanTable<H8> = HuffmanTable {
    data: &[
        // 0b ... (0 +16)
        jmp8!(16, 4),    // 0b0000
        jmp8!(32, 4),    // 0b0001
        jmp8!(48, 4),    // 0b0010
        val8!(0xff, 4),    // 0b0011
        jmp8!(64, 4),    // 0b0100
        jmp8!(80, 4),    // 0b0101
        jmp8!(96, 4),    // 0b0110
        jmp8!(112, 4),    // 0b0111
        jmp8!(128, 4),    // 0b1000
        jmp8!(144, 4),    // 0b1001
        jmp8!(160, 3),    // 0b1010
        jmp8!(168, 2),    // 0b1011
        val8!(0x11, 4),    // 0b1100
        val8!(0x1, 4),    // 0b1101
        val8!(0x10, 4),    // 0b1110
        val8!(0x0, 4),    // 0b1111

        // 0b0000 ... (16 +16)
        val8!(0xef, 4),    // 0b0000
        val8!(0xfe, 4),    // 0b0001
        val8!(0xdf, 4),    // 0b0010
        val8!(0xfd, 4),    // 0b0011
        val8!(0xcf, 4),    // 0b0100
        val8!(0xfc, 4),    // 0b0101
        val8!(0xbf, 4),    // 0b0110
        val8!(0xfb, 4),    // 0b0111
        val8!(0xfa, 3),    // 0b1000
        val8!(0xfa, 3),    // 0b1001
        val8!(0xaf, 4),    // 0b1010
        val8!(0x9f, 4),    // 0b1011
        val8!(0xf9, 3),    // 0b1100
        val8!(0xf9, 3),    // 0b1101
        val8!(0xf8, 3),    // 0b1110
        val8!(0xf8, 3),    // 0b1111

        // 0b0001 ... (32 +16)
        val8!(0x8f, 4),    // 0b0000
        val8!(0x7f, 4),    // 0b0001
        val8!(0xf7, 3),    // 0b0010
        val8!(0xf7, 3),    // 0b0011
        val8!(0x6f, 3),    // 0b0100
        val8!(0x6f, 3),    // 0b0101
        val8!(0xf6, 3),    // 0b0110
        val8!(0xf6, 3),    // 0b0111
        val8!(0x5f, 3),    // 0b1000
        val8!(0x5f, 3),    // 0b1001
        val8!(0xf5, 3),    // 0b1010
        val8!(0xf5, 3),    // 0b1011
        val8!(0x4f, 3),    // 0b1100
        val8!(0x4f, 3),    // 0b1101
        val8!(0xf4, 3),    // 0b1110
        val8!(0xf4, 3),    // 0b1111

        // 0b0010 ... (48 +16)
        val8!(0x3f, 3),    // 0b0000
        val8!(0x3f, 3),    // 0b0001
        val8!(0xf3, 3),    // 0b0010
        val8!(0xf3, 3),    // 0b0011
        val8!(0x2f, 3),    // 0b0100
        val8!(0x2f, 3),    // 0b0101
        val8!(0xf2, 3),    // 0b0110
        val8!(0xf2, 3),    // 0b0111
        val8!(0xf1, 3),    // 0b1000
        val8!(0xf1, 3),    // 0b1001
        val8!(0x1f, 4),    // 0b1010
        val8!(0xf0, 4),    // 0b1011
        jmp8!(172, 3),    // 0b1100
        jmp8!(180, 3),    // 0b1101
        jmp8!(188, 3),    // 0b1110
        jmp8!(196, 3),    // 0b1111

        // 0b0100 ... (64 +16)
        jmp8!(204, 4),    // 0b0000
        jmp8!(220, 3),    // 0b0001
        jmp8!(228, 3),    // 0b0010
        jmp8!(236, 3),    // 0b0011
        jmp8!(244, 2),    // 0b0100
        jmp8!(248, 2),    // 0b0101
        jmp8!(252, 2),    // 0b0110
        jmp8!(256, 2),    // 0b0111
        jmp8!(260, 2),    // 0b1000
        jmp8!(264, 2),    // 0b1001
        jmp8!(268, 2),    // 0b1010
        jmp8!(272, 2),    // 0b1011
        jmp8!(276, 2),    // 0b1100
        jmp8!(280, 3),    // 0b1101
        jmp8!(288, 2),    // 0b1110
        jmp8!(292, 2),    // 0b1111

        // 0b0101 ... (80 +16)
        jmp8!(296, 2),    // 0b0000
        jmp8!(300, 3),    // 0b0001
        jmp8!(308, 2),    // 0b0010
        jmp8!(312, 3),    // 0b0011
        jmp8!(320, 1),    // 0b0100
        jmp8!(322, 2),    // 0b0101
        jmp8!(326, 2),    // 0b0110
        jmp8!(330, 1),    // 0b0111
        jmp8!(332, 2),    // 0b1000
        jmp8!(336, 1),    // 0b1001
        jmp8!(338, 1),    // 0b1010
        jmp8!(340, 1),    // 0b1011
        jmp8!(342, 1),    // 0b1100
        jmp8!(344, 1),    // 0b1101
        jmp8!(346, 1),    // 0b1110
        jmp8!(348, 1),    // 0b1111

        // 0b0110 ... (96 +16)
        jmp8!(350, 1),    // 0b0000
        jmp8!(352, 1),    // 0b0001
        jmp8!(354, 1),    // 0b0010
        jmp8!(356, 1),    // 0b0011
        jmp8!(358, 1),    // 0b0100
        jmp8!(360, 1),    // 0b0101
        jmp8!(362, 1),    // 0b0110
        jmp8!(364, 1),    // 0b0111
        jmp8!(366, 1),    // 0b1000
        jmp8!(368, 1),    // 0b1001
        jmp8!(370, 2),    // 0b1010
        jmp8!(374, 1),    // 0b1011
        jmp8!(376, 2),    // 0b1100
        val8!(0x73, 4),    // 0b1101
        jmp8!(380, 1),    // 0b1110
        val8!(0x72, 4),    // 0b1111

        // 0b0111 ... (112 +16)
        val8!(0x46, 4),    // 0b0000
        val8!(0x64, 4),    // 0b0001
        val8!(0x55, 4),    // 0b0010
        val8!(0x71, 4),    // 0b0011
        val8!(0x36, 4),    // 0b0100
        val8!(0x63, 4),    // 0b0101
        val8!(0x45, 4),    // 0b0110
        val8!(0x54, 4),    // 0b0111
        val8!(0x26, 4),    // 0b1000
        val8!(0x62, 4),    // 0b1001
        val8!(0x16, 4),    // 0b1010
        val8!(0x61, 4),    // 0b1011
        jmp8!(382, 1),    // 0b1100
        val8!(0x35, 4),    // 0b1101
        val8!(0x53, 4),    // 0b1110
        val8!(0x44, 4),    // 0b1111

        // 0b1000 ... (128 +16)
        val8!(0x25, 4),    // 0b0000
        val8!(0x52, 4),    // 0b0001
        val8!(0x15, 4),    // 0b0010
        jmp8!(384, 1),    // 0b0011
        val8!(0x51, 3),    // 0b0100
        val8!(0x51, 3),    // 0b0101
        val8!(0x34, 4),    // 0b0110
        val8!(0x43, 4),    // 0b0111
        val8!(0x24, 3),    // 0b1000
        val8!(0x24, 3),    // 0b1001
        val8!(0x42, 3),    // 0b1010
        val8!(0x42, 3),    // 0b1011
        val8!(0x33, 3),    // 0b1100
        val8!(0x33, 3),    // 0b1101
        val8!(0x14, 3),    // 0b1110
        val8!(0x14, 3),    // 0b1111

        // 0b1001 ... (144 +16)
        val8!(0x41, 3),    // 0b0000
        val8!(0x41, 3),    // 0b0001
        val8!(0x4, 4),    // 0b0010
        val8!(0x40, 4),    // 0b0011
        val8!(0x23, 3),    // 0b0100
        val8!(0x23, 3),    // 0b0101
        val8!(0x32, 3),    // 0b0110
        val8!(0x32, 3),    // 0b0111
        val8!(0x13, 2),    // 0b1000
        val8!(0x13, 2),    // 0b1001
        val8!(0x13, 2),    // 0b1010
        val8!(0x13, 2),    // 0b1011
        val8!(0x31, 2),    // 0b1100
        val8!(0x31, 2),    // 0b1101
        val8!(0x31, 2),    // 0b1110
        val8!(0x31, 2),    // 0b1111

        // 0b1010 ... (160 +8)
        val8!(0x3, 3),    // 0b000
        val8!(0x30, 3),    // 0b001
        val8!(0x22, 2),    // 0b010
        val8!(0x22, 2),    // 0b011
        val8!(0x12, 1),    // 0b100
        val8!(0x12, 1),    // 0b101
        val8!(0x12, 1),    // 0b110
        val8!(0x12, 1),    // 0b111

        // 0b1011 ... (168 +4)
        val8!(0x21, 1),    // 0b00
        val8!(0x21, 1),    // 0b01
        val8!(0x2, 2),    // 0b10
        val8!(0x20, 2),    // 0b11

        // 0b0010 1100 ... (172 +8)
        val8!(0xf, 1),    // 0b000
        val8!(0xf, 1),    // 0b001
        val8!(0xf, 1),    // 0b010
        val8!(0xf, 1),    // 0b011
        val8!(0xee, 3),    // 0b100
        val8!(0xde, 3),    // 0b101
        val8!(0xed, 3),    // 0b110
        val8!(0xce, 3),    // 0b111

        // 0b0010 1101 ... (180 +8)
        val8!(0xec, 3),    // 0b000
        val8!(0xdd, 3),    // 0b001
        val8!(0xbe, 3),    // 0b010
        val8!(0xeb, 3),    // 0b011
        val8!(0xcd, 3),    // 0b100
        val8!(0xdc, 3),    // 0b101
        val8!(0xae, 3),    // 0b110
        val8!(0xea, 3),    // 0b111

        // 0b0010 1110 ... (188 +8)
        val8!(0xbd, 3),    // 0b000
        val8!(0xdb, 3),    // 0b001
        val8!(0xcc, 3),    // 0b010
        val8!(0x9e, 3),    // 0b011
        val8!(0xe9, 3),    // 0b100
        val8!(0xad, 3),    // 0b101
        val8!(0xda, 3),    // 0b110
        val8!(0xbc, 3),    // 0b111

        // 0b0010 1111 ... (196 +8)
        val8!(0xcb, 3),    // 0b000
        val8!(0x8e, 3),    // 0b001
        val8!(0xe8, 3),    // 0b010
        val8!(0x9d, 3),    // 0b011
        val8!(0xd9, 3),    // 0b100
        val8!(0x7e, 3),    // 0b101
        val8!(0xe7, 3),    // 0b110
        val8!(0xac, 3),    // 0b111

        // 0b0100 0000 ... (204 +16)
        val8!(0xca, 3),    // 0b0000
        val8!(0xca, 3),    // 0b0001
        val8!(0xbb, 3),    // 0b0010
        val8!(0xbb, 3),    // 0b0011
        val8!(0x8d, 3),    // 0b0100
        val8!(0x8d, 3),    // 0b0101
        val8!(0xd8, 3),    // 0b0110
        val8!(0xd8, 3),    // 0b0111
        val8!(0xe, 4),    // 0b1000
        val8!(0xe0, 4),    // 0b1001
        val8!(0xd, 3),    // 0b1010
        val8!(0xd, 3),    // 0b1011
        val8!(0xe6, 2),    // 0b1100
        val8!(0xe6, 2),    // 0b1101
        val8!(0xe6, 2),    // 0b1110
        val8!(0xe6, 2),    // 0b1111

        // 0b0100 0001 ... (220 +8)
        val8!(0x6e, 3),    // 0b000
        val8!(0x9c, 3),    // 0b001
        val8!(0xc9, 2),    // 0b010
        val8!(0xc9, 2),    // 0b011
        val8!(0x5e, 2),    // 0b100
        val8!(0x5e, 2),    // 0b101
        val8!(0xba, 2),    // 0b110
        val8!(0xba, 2),    // 0b111

        // 0b0100 0010 ... (228 +8)
        val8!(0xe5, 2),    // 0b000
        val8!(0xe5, 2),    // 0b001
        val8!(0xab, 3),    // 0b010
        val8!(0x7d, 3),    // 0b011
        val8!(0xd7, 2),    // 0b100
        val8!(0xd7, 2),    // 0b101
        val8!(0xe4, 2),    // 0b110
        val8!(0xe4, 2),    // 0b111

        // 0b0100 0011 ... (236 +8)
        val8!(0x8c, 2),    // 0b000
        val8!(0x8c, 2),    // 0b001
        val8!(0xc8, 2),    // 0b010
        val8!(0xc8, 2),    // 0b011
        val8!(0x4e, 3),    // 0b100
        val8!(0x2e, 3),    // 0b101
        val8!(0x3e, 2),    // 0b110
        val8!(0x3e, 2),    // 0b111

        // 0b0100 0100 ... (244 +4)
        val8!(0x6d, 2),    // 0b00
        val8!(0xd6, 2),    // 0b01
        val8!(0xe3, 2),    // 0b10
        val8!(0x9b, 2),    // 0b11

        // 0b0100 0101 ... (248 +4)
        val8!(0xb9, 2),    // 0b00
        val8!(0xaa, 2),    // 0b01
        val8!(0xe2, 2),    // 0b10
        val8!(0x1e, 2),    // 0b11

        // 0b0100 0110 ... (252 +4)
        val8!(0xe1, 2),    // 0b00
        val8!(0x5d, 2),    // 0b01
        val8!(0xd5, 2),    // 0b10
        val8!(0x7c, 2),    // 0b11

        // 0b0100 0111 ... (256 +4)
        val8!(0xc7, 2),    // 0b00
        val8!(0x4d, 2),    // 0b01
        val8!(0x8b, 2),    // 0b10
        val8!(0xb8, 2),    // 0b11

        // 0b0100 1000 ... (260 +4)
        val8!(0xd4, 2),    // 0b00
        val8!(0x9a, 2),    // 0b01
        val8!(0xa9, 2),    // 0b10
        val8!(0x6c, 2),    // 0b11

        // 0b0100 1001 ... (264 +4)
        val8!(0xc6, 2),    // 0b00
        val8!(0x3d, 2),    // 0b01
        val8!(0xd3, 2),    // 0b10
        val8!(0x2d, 2),    // 0b11

        // 0b0100 1010 ... (268 +4)
        val8!(0xd2, 2),    // 0b00
        val8!(0x1d, 2),    // 0b01
        val8!(0x7b, 2),    // 0b10
        val8!(0xb7, 2),    // 0b11

        // 0b0100 1011 ... (272 +4)
        val8!(0xd1, 2),    // 0b00
        val8!(0x5c, 2),    // 0b01
        val8!(0xc5, 2),    // 0b10
        val8!(0x8a, 2),    // 0b11

        // 0b0100 1100 ... (276 +4)
        val8!(0xa8, 2),    // 0b00
        val8!(0x99, 2),    // 0b01
        val8!(0x4c, 2),    // 0b10
        val8!(0xc4, 2),    // 0b11

        // 0b0100 1101 ... (280 +8)
        val8!(0x6b, 2),    // 0b000
        val8!(0x6b, 2),    // 0b001
        val8!(0xb6, 2),    // 0b010
        val8!(0xb6, 2),    // 0b011
        val8!(0xd0, 3),    // 0b100
        val8!(0xc, 3),    // 0b101
        val8!(0x3c, 2),    // 0b110
        val8!(0x3c, 2),    // 0b111

        // 0b0100 1110 ... (288 +4)
        val8!(0xc3, 2),    // 0b00
        val8!(0x7a, 2),    // 0b01
        val8!(0xa7, 2),    // 0b10
        val8!(0x2c, 2),    // 0b11

        // 0b0100 1111 ... (292 +4)
        val8!(0xc2, 2),    // 0b00
        val8!(0x5b, 2),    // 0b01
        val8!(0xb5, 2),    // 0b10
        val8!(0x1c, 2),    // 0b11

        // 0b0101 0000 ... (296 +4)
        val8!(0x89, 2),    // 0b00
        val8!(0x98, 2),    // 0b01
        val8!(0xc1, 2),    // 0b10
        val8!(0x4b, 2),    // 0b11

        // 0b0101 0001 ... (300 +8)
        val8!(0xc0, 3),    // 0b000
        val8!(0xb, 3),    // 0b001
        val8!(0x3b, 2),    // 0b010
        val8!(0x3b, 2),    // 0b011
        val8!(0xb0, 3),    // 0b100
        val8!(0xa, 3),    // 0b101
        val8!(0x1a, 2),    // 0b110
        val8!(0x1a, 2),    // 0b111

        // 0b0101 0010 ... (308 +4)
        val8!(0xb4, 1),    // 0b00
        val8!(0xb4, 1),    // 0b01
        val8!(0x6a, 2),    // 0b10
        val8!(0xa6, 2),    // 0b11

        // 0b0101 0011 ... (312 +8)
        val8!(0x79, 2),    // 0b000
        val8!(0x79, 2),    // 0b001
        val8!(0x97, 2),    // 0b010
        val8!(0x97, 2),    // 0b011
        val8!(0xa0, 3),    // 0b100
        val8!(0x9, 3),    // 0b101
        val8!(0x90, 2),    // 0b110
        val8!(0x90, 2),    // 0b111

        // 0b0101 0100 ... (320 +2)
        val8!(0xb3, 1),    // 0b0
        val8!(0x88, 1),    // 0b1

        // 0b0101 0101 ... (322 +4)
        val8!(0x2b, 2),    // 0b00
        val8!(0x5a, 2),    // 0b01
        val8!(0xb2, 1),    // 0b10
        val8!(0xb2, 1),    // 0b11

        // 0b0101 0110 ... (326 +4)
        val8!(0xa5, 2),    // 0b00
        val8!(0x1b, 2),    // 0b01
        val8!(0xb1, 2),    // 0b10
        val8!(0x69, 2),    // 0b11

        // 0b0101 0111 ... (330 +2)
        val8!(0x96, 1),    // 0b0
        val8!(0xa4, 1),    // 0b1

        // 0b0101 1000 ... (332 +4)
        val8!(0x4a, 2),    // 0b00
        val8!(0x78, 2),    // 0b01
        val8!(0x87, 1),    // 0b10
        val8!(0x87, 1),    // 0b11

        // 0b0101 1001 ... (336 +2)
        val8!(0x3a, 1),    // 0b0
        val8!(0xa3, 1),    // 0b1

        // 0b0101 1010 ... (338 +2)
        val8!(0x59, 1),    // 0b0
        val8!(0x95, 1),    // 0b1

        // 0b0101 1011 ... (340 +2)
        val8!(0x2a, 1),    // 0b0
        val8!(0xa2, 1),    // 0b1

        // 0b0101 1100 ... (342 +2)
        val8!(0xa1, 1),    // 0b0
        val8!(0x68, 1),    // 0b1

        // 0b0101 1101 ... (344 +2)
        val8!(0x86, 1),    // 0b0
        val8!(0x77, 1),    // 0b1

        // 0b0101 1110 ... (346 +2)
        val8!(0x49, 1),    // 0b0
        val8!(0x94, 1),    // 0b1

        // 0b0101 1111 ... (348 +2)
        val8!(0x39, 1),    // 0b0
        val8!(0x93, 1),    // 0b1

        // 0b0110 0000 ... (350 +2)
        val8!(0x58, 1),    // 0b0
        val8!(0x85, 1),    // 0b1

        // 0b0110 0001 ... (352 +2)
        val8!(0x29, 1),    // 0b0
        val8!(0x67, 1),    // 0b1

        // 0b0110 0010 ... (354 +2)
        val8!(0x76, 1),    // 0b0
        val8!(0x92, 1),    // 0b1

        // 0b0110 0011 ... (356 +2)
        val8!(0x19, 1),    // 0b0
        val8!(0x91, 1),    // 0b1

        // 0b0110 0100 ... (358 +2)
        val8!(0x48, 1),    // 0b0
        val8!(0x84, 1),    // 0b1

        // 0b0110 0101 ... (360 +2)
        val8!(0x57, 1),    // 0b0
        val8!(0x75, 1),    // 0b1

        // 0b0110 0110 ... (362 +2)
        val8!(0x38, 1),    // 0b0
        val8!(0x83, 1),    // 0b1

        // 0b0110 0111 ... (364 +2)
        val8!(0x66, 1),    // 0b0
        val8!(0x28, 1),    // 0b1

        // 0b0110 1000 ... (366 +2)
        val8!(0x82, 1),    // 0b0
        val8!(0x18, 1),    // 0b1

        // 0b0110 1001 ... (368 +2)
        val8!(0x47, 1),    // 0b0
        val8!(0x74, 1),    // 0b1

        // 0b0110 1010 ... (370 +4)
        val8!(0x81, 1),    // 0b00
        val8!(0x81, 1),    // 0b01
        val8!(0x8, 2),    // 0b10
        val8!(0x80, 2),    // 0b11

        // 0b0110 1011 ... (374 +2)
        val8!(0x56, 1),    // 0b0
        val8!(0x65, 1),    // 0b1

        // 0b0110 1100 ... (376 +4)
        val8!(0x17, 1),    // 0b00
        val8!(0x17, 1),    // 0b01
        val8!(0x7, 2),    // 0b10
        val8!(0x70, 2),    // 0b11

        // 0b0110 1110 ... (380 +2)
        val8!(0x37, 1),    // 0b0
        val8!(0x27, 1),    // 0b1

        // 0b0111 1100 ... (382 +2)
        val8!(0x6, 1),    // 0b0
        val8!(0x60, 1),    // 0b1

        // 0b1000 0011 ... (384 +2)
        val8!(0x5, 1),    // 0b0
        val8!(0x50, 1),    // 0b1
    ],
    n_init_bits: 4,
    n_table_bits: 12,
};

pub const QUADS_HUFFMAN_TABLE_A: HuffmanTable<H8> = HuffmanTable {
    data: &[
        // 0b ... (0 +16)
        jmp8!(16, 2),    // 0b0000
        jmp8!(20, 2),    // 0b0001
        jmp8!(24, 1),    // 0b0010
        jmp8!(26, 1),    // 0b0011
        val8!(0x2, 4),    // 0b0100
        val8!(0x1, 4),    // 0b0101
        val8!(0x4, 4),    // 0b0110
        val8!(0x8, 4),    // 0b0111
        val8!(0x0, 1),    // 0b1000
        val8!(0x0, 1),    // 0b1001
        val8!(0x0, 1),    // 0b1010
        val8!(0x0, 1),    // 0b1011
        val8!(0x0, 1),    // 0b1100
        val8!(0x0, 1),    // 0b1101
        val8!(0x0, 1),    // 0b1110
        val8!(0x0, 1),    // 0b1111

        // 0b0000 ... (16 +4)
        val8!(0xb, 2),    // 0b00
        val8!(0xf, 2),    // 0b01
        val8!(0xd, 2),    // 0b10
        val8!(0xe, 2),    // 0b11

        // 0b0001 ... (20 +4)
        val8!(0x7, 2),    // 0b00
        val8!(0x5, 2),    // 0b01
        val8!(0x9, 1),    // 0b10
        val8!(0x9, 1),    // 0b11

        // 0b0010 ... (24 +2)
        val8!(0x6, 1),    // 0b0
        val8!(0x3, 1),    // 0b1

        // 0b0011 ... (26 +2)
        val8!(0xa, 1),    // 0b0
        val8!(0xc, 1),    // 0b1
    ],
    n_init_bits: 4,
    n_table_bits: 6,
};

pub const QUADS_HUFFMAN_TABLE_B: HuffmanTable<H8> = HuffmanTable {
    data: &[
        // 0b ... (0 +16)
        val8!(0xf, 4),    // 0b0000
        val8!(0xe, 4),    // 0b0001
        val8!(0xd, 4),    // 0b0010
        val8!(0xc, 4),    // 0b0011
        val8!(0xb, 4),    // 0b0100
        val8!(0xa, 4),    // 0b0101
        val8!(0x9, 4),    // 0b0110
        val8!(0x8, 4),    // 0b0111
        val8!(0x7, 4),    // 0b1000
        val8!(0x6, 4),    // 0b1001
        val8!(0x5, 4),    // 0b1010
        val8!(0x4, 4),    // 0b1011
        val8!(0x3, 4),    // 0b1100
        val8!(0x2, 4),    // 0b1101
        val8!(0x1, 4),    // 0b1110
        val8!(0x0, 4),    // 0b1111
    ],
    n_init_bits: 4,
    n_table_bits: 4,
};

