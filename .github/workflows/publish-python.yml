name: publish-python

defaults:
  run:
    shell: bash

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  CARGO_TERM_COLOR: always
  MACOSX_DEPLOYMENT_TARGET: 10.7

jobs:
  publish-python:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os:
          - "ubuntu-20.04"
          - "macos-10.15"
          - "windows-2019"

    steps:

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
          toolchain: "1.61.0"
          override: true

    - uses: actions/setup-python@v4
      with:
        python-version: "3.8"

    - name: Check out Babycat code from GitHub
      uses: actions/checkout@v3

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}

    - name: Set the version in our Cargo.toml
      run: ./.version-bump.py ${{ steps.get_version.outputs.VERSION }}

    - name: Install Python build tools
      run: python3 -m pip install --upgrade pip wheel twine

    - name: Build Windows and macOS Python wheels
      if: matrix.os != 'ubuntu-20.04'
      run: make build-python

    - name: Publish Windows and macOS Python wheels to PyPI
      run: twine upload --non-interactive target/release/python/*.whl
      if: matrix.os != 'ubuntu-20.04'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

    - name: Build the manylinux Python wheel
      if: matrix.os == 'ubuntu-20.04'
      run: make build-python-manylinux

    - name: Publish the manylinux Python wheel to PyPI
      run: twine upload --non-interactive target/release/python-manylinux/*.whl
      if: matrix.os == 'ubuntu-20.04'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
