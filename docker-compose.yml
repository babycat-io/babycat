# These are Docker images that are not required to use
# or compile Babycat, but they contain development tools
# that help when testing Babycat.

version: "3.9"

services:
  # Rust in a Docker container.
  # We use the `cargo` command as the entrypoint.
  cargo:
    build:
      network: host
      context: ./docker/rust
    image: babycat/rust
    init: true
    network_mode: host

  # The minimal Ubuntu installation to compile Babycat.
  # This depends on the above Rust/Cargo Docker image.
  ubuntu-minimal:
    build:
      network: host
      context: ./docker/ubuntu-minimal
    image: babycat/ubuntu-minimal
    init: true
    network_mode: host
    working_dir: /host
    volumes:
      - type: bind
        source: "."
        target: /host

  # A gigantic Docker container that contains multiple
  # Python versions and other development tools.
  # This depends on the above ubuntu-minimal Docker image.
  main:
    build:
      network: host
      context: ./docker/main
    image: babycat/main
    init: true
    network_mode: host
    working_dir: /host
    volumes:
      - type: bind
        source: "."
        target: /host

  # A container used for building manylinux wheels.
  # We use the pip command as the Docker entrypoint.
  pip:
    build:
      network: host
      context: ./docker/pip
    image: babycat/pip
    init: true
    network_mode: host
    entrypoint: pip
    working_dir: /io
    volumes:
      - type: bind
        source: "."
        target: /io

  # A local copy of the Netlify build image.
  # Used to test the `make docs-netlify` build command.
  netlify:
    image: netlify/build:focal
    init: true
    network_mode: host
    entrypoint: /opt/build-bin/build
    command: "make docs-netlify"
    working_dir: /opt/buildhome/repo
    environment:
      PYTHON_VERSION: "3.8"
    volumes:
      - type: bind
        source: "."
        target: /opt/buildhome/repo
